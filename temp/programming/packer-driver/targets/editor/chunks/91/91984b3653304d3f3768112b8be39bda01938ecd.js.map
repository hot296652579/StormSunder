{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Component/TornadoAIComponent.ts"],"names":["Tween","Vec3","_decorator","randomRange","PathfindingManager","PlayerStatus","TornadoComponent","PropMgr","GameMgr","GameStatus","PlayerMgr","ccclass","property","BehaviorType","TornadoAIComponent","moveDuration","escapeDuration","chaseDuration","chaseAIProbability","chasePlayerProbability","isChasing","isEscaping","targetNode","moveProbability","behaviorType","Move","start","ai","initAIPlayer","onPlayerInfoHandler","decideAction","radiusTigger","on","onRadiusTriggerEnter","aiConfig","inst","getRandomAIConfig","text","range","move_judge","move_time","escape_time","pursuit_1","pursuit_2","pursuit_time","data","playerInfo","nickName","currentLv","level","Math","floor","random","nextExp","attributeBonusMgr","getExpNeed","attack","getStormSunderAttack","speed","getStormSunderSpeed","round","playerStatus","DIE","move","randomMove","closestItem","getNearestProp","node","chaseTarget","maxDistance","randomDirection","normalize","multiplyScalar","targetPosition","position","clone","add","getInstance","moveTo","scheduleOnce","onTriggerEnter","event","otherCollider","getGroup","unscheduleAllCallbacks","stopAllByTarget","setPositionByObstacle","onTriggerStay","targetTornado","parent","getComponent","isPlayer","isWin","setGameStatus","End","addExpByKill","otherNode","isTargetAI","targetLv","escapeFrom","continueCurrentBehavior","target","followTarget","targetPos","x","z","direction","subtract","escapePosition"],"mappings":"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","sourcesContent":["import { BoxCollider, Component, ITriggerEvent, Node, Tween, Vec3, _decorator, randomRange } from 'cc';\r\nimport { PathfindingManager } from '../Manager/PathfindingManager';\r\nimport { PlayerStatus, TornadoComponent } from './TornadoComponent';\r\nimport { GameUtil } from '../GameUtil';\r\nimport { PropMgr } from '../Manager/PropMgr';\r\nimport { GameMgr, GameStatus } from '../Manager/GameMgr';\r\nimport { PlayerMgr } from '../Manager/PlayerMgr';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum BehaviorType {\r\n    Move,\r\n    Collect  //收集最近的道具\r\n}\r\n\r\n/** 龙卷风AI组件 */\r\n@ccclass('TornadoAIComponent')\r\nexport class TornadoAIComponent extends TornadoComponent {\r\n\r\n    moveDuration: number = 3; //移动行为持续时间（秒）\r\n    escapeDuration: number = 5; //逃离行为持续时间（秒）\r\n    chaseDuration: number = 20; //追击行为持续时间（秒）\r\n    chaseAIProbability: number = 0; //是否追击 AI 的概率\r\n    chasePlayerProbability: number = 0; //是否追击玩家的概率\r\n\r\n    isChasing: boolean = false; // 是否追击中\r\n    isEscaping: boolean = false; // 是否逃跑中\r\n    targetNode: Node | null = null; // 目标\r\n\r\n    moveProbability: number = 0.5; //移动概率\r\n    behaviorType: BehaviorType = BehaviorType.Move; // 行为类型\r\n\r\n    protected async start() {\r\n        super.start();\r\n        this.ai = true;\r\n\r\n        this.initAIPlayer();\r\n        this.onPlayerInfoHandler();\r\n        this.decideAction(); // 进入行为循环\r\n\r\n        this.radiusTigger.on('onTriggerEnter', this.onRadiusTriggerEnter, this);\r\n    }\r\n\r\n    private initAIPlayer() {\r\n        const aiConfig = PlayerMgr.inst.getRandomAIConfig();\r\n        // console.log(aiConfig.data);\r\n        //text:名称 range:检测半径 move_juge:移动概率 move_time:移动时间 escape_time:逃跑时间 pursuit_1:追击玩家概率 pursuit_2:追击AI概率 pursuit_time:追击时间\r\n        const { text, range, move_judge, move_time, escape_time, pursuit_1, pursuit_2, pursuit_time } = aiConfig.data;\r\n        this.playerInfo.nickName = text;\r\n        this.nickName = text;\r\n        this.currentLv = 1;\r\n        this.playerInfo.level = this.currentLv;\r\n\r\n        this.moveDuration = Math.floor(move_time[0] + Math.random() * (move_time[1] - move_time[0] + 1));\r\n        this.escapeDuration = Math.floor(escape_time[0] + Math.random() * (escape_time[1] - escape_time[0] + 1));\r\n        this.chaseDuration = Math.floor(pursuit_time[0] + Math.random() * (pursuit_time[1] - pursuit_time[0] + 1));\r\n        this.chaseAIProbability = pursuit_1;\r\n        this.chasePlayerProbability = pursuit_2;\r\n        this.moveProbability = move_judge;\r\n\r\n        this.nextExp = this.attributeBonusMgr.getExpNeed(this.currentLv + 1);\r\n        this.attack = this.attributeBonusMgr.getStormSunderAttack(this.currentLv, true);\r\n        this.speed = this.attributeBonusMgr.getStormSunderSpeed(this.currentLv, true);\r\n        this.speed = Math.round((this.speed / 2) * 100) / 100;\r\n\r\n        // console.log(`AI 攻击力:${this.attack} 速度:${this.speed} 下一级经验:${this.nextExp}`);\r\n    }\r\n\r\n    /** 选择 AI 行为 */\r\n    private decideAction() {\r\n        if (this.playerStatus == PlayerStatus.DIE) return; // AI 死亡时不执行行为\r\n\r\n        const move = Math.random() * 100 < this.moveProbability;\r\n\r\n        // console.log(`AI 行为判断:移动概率:${this.moveProbability} 是否移动:${move}`);\r\n        if (move) {\r\n            this.randomMove();\r\n        } else {\r\n            const closestItem = PropMgr.inst.getNearestProp(this.node);\r\n            if (closestItem) {\r\n                this.chaseTarget(closestItem);\r\n            } else {\r\n                this.randomMove();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 随机移动 */\r\n    private randomMove() {\r\n        if (this.isChasing || this.isEscaping) return; // 如果正在追击或逃跑，则不进行随机移动\r\n\r\n        // 计算最大可移动距离 = 速度 * 持续时间\r\n        const maxDistance = this.speed * this.moveDuration;\r\n\r\n        // 随机方向的单位向量\r\n        let randomDirection = new Vec3(randomRange(-1, 1), 0, randomRange(-1, 1));\r\n        randomDirection.normalize(); // 归一化，保持方向不变但长度为 1\r\n\r\n        // 计算最终的移动向量\r\n        randomDirection.multiplyScalar(maxDistance);\r\n\r\n        const targetPosition = this.node.position.clone().add(randomDirection);\r\n\r\n        PathfindingManager.getInstance().moveTo(this.node, targetPosition, this.moveDuration);\r\n        // console.log(`AI 触发随机移动行为!`, targetPosition);\r\n\r\n        this.scheduleOnce(() => {\r\n            if (!this.isChasing && !this.isEscaping) { // 再次检查状态，避免重复调用\r\n                this.decideAction();\r\n            }\r\n        }, this.moveDuration);\r\n    }\r\n\r\n    protected onTriggerEnter(event: ITriggerEvent): void {\r\n        if (event.otherCollider.getGroup() === 1 << 2) {\r\n            this.unscheduleAllCallbacks();\r\n            this.isChasing = false;\r\n            this.isEscaping = false;\r\n            this.targetNode = null;\r\n            Tween.stopAllByTarget(this.node);\r\n\r\n            this.setPositionByObstacle(event, () => {\r\n                this.decideAction();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected onTriggerStay(event: ITriggerEvent): void {\r\n        super.onTriggerStay(event);\r\n        const otherCollider = event.otherCollider;\r\n\r\n        if (otherCollider.getGroup() == 1 << 3) {\r\n            const targetTornado = otherCollider.node.parent.getComponent(TornadoComponent);\r\n            if (!targetTornado) return;\r\n\r\n            const isPlayer = targetTornado instanceof TornadoComponent;\r\n            if (this.currentLv > targetTornado.currentLv && isPlayer) {\r\n                GameMgr.inst.isWin = false;\r\n                GameMgr.inst.setGameStatus(GameStatus.End);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected addExpByKill() {\r\n        super.addExpByKill(true);\r\n        // console.log(`AI 当前经验:${this.currentExp}`);\r\n    }\r\n\r\n    /** 触发器检测（过程中遇到其他龙卷风） */\r\n    protected onRadiusTriggerEnter(event: ITriggerEvent): void {\r\n        const otherCollider = event.otherCollider;\r\n        const otherNode = otherCollider.node;\r\n\r\n        if (event.otherCollider.getGroup() == 1 << 3) {\r\n            const targetTornado = otherNode.parent.getComponent(TornadoComponent);\r\n            if (!targetTornado) return;\r\n\r\n            const isTargetAI = targetTornado instanceof TornadoAIComponent;\r\n            const targetLv = targetTornado.currentLv;\r\n\r\n            if (targetLv > this.currentLv) {\r\n                // 目标等级比自己高 → 逃跑\r\n                this.escapeFrom(targetTornado.node);\r\n            } else if (targetLv < this.currentLv) {\r\n                // 目标等级比自己低 → 先判断是否追击\r\n                if (Math.random() * 100 < this.chaseAIProbability) {\r\n                    if (isTargetAI) {\r\n                        // 目标是 AI，直接追击\r\n                        this.chaseTarget(targetTornado.node);\r\n                    } else {\r\n                        // 目标是玩家，进一步判断是否追击\r\n                        if (Math.random() * 100 < this.chasePlayerProbability) {\r\n                            this.chaseTarget(targetTornado.node);\r\n                        } else {\r\n                            // 不追击，则保持当前行为到持续时间结束\r\n                            this.continueCurrentBehavior();\r\n                        }\r\n                    }\r\n                } else {\r\n                    // 不追击，持续当前行为直到时间结束\r\n                    this.continueCurrentBehavior();\r\n                }\r\n            }\r\n            // 如果等级相同，继续当前行为\r\n        }\r\n    }\r\n\r\n    /** 继续当前行为直到时间结束 */\r\n    private continueCurrentBehavior() {\r\n        this.scheduleOnce(() => {\r\n            this.decideAction();\r\n        }, this.moveDuration);\r\n    }\r\n\r\n    /** 追击目标 */\r\n    private chaseTarget(target: Node) {\r\n        if (this.isChasing) return;\r\n        // console.log(`AI 追击目标->>>>>>>>>>>>>`);\r\n\r\n        this.isChasing = true;\r\n        this.targetNode = target;\r\n\r\n        PathfindingManager.getInstance().followTarget(this, target, this.speed, () => {\r\n            // console.log(`AI 追击目标到达`);\r\n            this.unscheduleAllCallbacks();\r\n            this.isChasing = false;\r\n            this.targetNode = null;\r\n            this.decideAction();\r\n        });\r\n\r\n        // 追击时间结束后恢复行为\r\n        this.scheduleOnce(() => {\r\n            this.isChasing = false;\r\n            this.targetNode = null;\r\n            this.decideAction();\r\n        }, this.chaseDuration);\r\n    }\r\n\r\n    /** 逃离目标 */\r\n    private escapeFrom(target: Node) {\r\n        this.isEscaping = true;\r\n        // console.log(`AI 逃离行为->>>>>>>>>>>>>>`);\r\n\r\n        // 计算最大可逃离距离 = 速度 * 持续时间\r\n        const maxDistance = this.speed * this.escapeDuration;\r\n\r\n        // 计算逃离方向，指向目标的反方向\r\n        const targetPos = new Vec3(target.position.x, 0, target.position.z);\r\n        const direction = this.node.position.clone().subtract(targetPos).normalize().multiplyScalar(maxDistance);\r\n        const escapePosition = this.node.position.clone().add(direction);\r\n\r\n        PathfindingManager.getInstance().moveTo(this.node, escapePosition, this.escapeDuration);\r\n\r\n        this.scheduleOnce(() => {\r\n            this.isEscaping = false;\r\n            this.decideAction();\r\n        }, this.escapeDuration);\r\n    }\r\n\r\n}\r\n"]}