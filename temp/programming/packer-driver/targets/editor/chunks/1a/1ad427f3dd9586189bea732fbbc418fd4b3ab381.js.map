{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Manager/PlayerMgr.ts"],"names":["PlayerMgr","instantiate","Prefab","resLoader","StormSunderGlobalInstance","TornadoComponent","TornadoAIComponent","AttributeBonusMgr","res","tornadoNode","aiPlayersConfig","Map","createAIPlayerCount","aiConfigCount","aiIndex","pickAiMap","Instance","_instance","inst","genareatorAIPlayer","Promise","resolve","reject","aiPoints","instance","i","infoPrefab","loadAsync","gameBundleName","infoNode","name","parent","players","point","children","setPosition","worldPosition","clone","addComponent","getTornadoNode","playersUI","length","setPlayerVisible","visible","tornado","active","playerAddComponent","then","node","addAIPlayers","id","config","aiConfig","getAIConfigById","set","weightGeneateAIConfig","aiConfigs","Array","from","values","sort","a","b","weight","accumulatedWeight","clear","console","log","getRandomAIConfig","resetAIIndex","getRanking","rankings","map","index","tornadoComp","getComponent","isPlayer","height","nickName","rankedPlayers","player","rank","playerRank","find","p","slice","getPlayerRank"],"mappings":"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","sourcesContent":["import { assetManager, instantiate, Prefab, Node, UITransform, Vec3, Vec2, view, game, PhysicsSystem, geometry } from \"cc\";\r\nimport { ResLoader, resLoader } from \"db://assets/core_tgx/base/ResLoader\";\r\nimport { StormSunderGlobalInstance } from \"../StormSunderGlobalInstance\";\r\nimport { TornadoComponent } from \"../Component/TornadoComponent\";\r\nimport { TornadoAIComponent } from \"../Component/TornadoAIComponent\";\r\nimport { AttributeBonusMgr } from \"./AttributeBonusMgr\";\r\nimport { Tableai_config } from \"db://assets/module_basic/table/Tableai_config\";\r\n\r\nconst res = [\r\n    \"Prefabs/Storm\",\r\n]\r\n\r\n/** 龙卷风管理器*/\r\nexport class PlayerMgr {\r\n    private static _instance: PlayerMgr;\r\n    public static get Instance(): PlayerMgr {\r\n        if (this._instance == null) {\r\n            this._instance = new PlayerMgr();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public static get inst(): PlayerMgr {\r\n        return this.Instance;\r\n    }\r\n\r\n    public tornadoNode: Node = null;//玩家节点\r\n    public aiPlayersConfig: Map<number, any> = new Map();//AI玩家配置\r\n    public createAIPlayerCount: number = 3;//创建AI玩家数量\r\n    public aiConfigCount: number = 3;//AI配置数量\r\n\r\n    private aiIndex: number = 0;//AI索引\r\n    private pickAiMap: Map<number, Tableai_config> = new Map();//权重随机的AI\r\n\r\n    //创建AI玩家\r\n    public async genareatorAIPlayer(): Promise<void> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const aiPoints = StormSunderGlobalInstance.instance.aiPoints;\r\n            for (let i = 0; i < this.createAIPlayerCount; i++) {\r\n                const infoPrefab = await resLoader.loadAsync(resLoader.gameBundleName, res[0], Prefab);\r\n                let infoNode = instantiate(infoPrefab);\r\n                infoPrefab.name = 'AIPlayer' + i;\r\n                infoNode.parent = StormSunderGlobalInstance.instance.players;\r\n\r\n                const point = aiPoints.children[i];\r\n                infoNode.setPosition(point.worldPosition.clone());\r\n                infoNode.addComponent(TornadoAIComponent);\r\n                resolve();\r\n            }\r\n        })\r\n    }\r\n\r\n    //获取玩家龙卷风节点\r\n    async getTornadoNode(): Promise<Node> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.tornadoNode) {\r\n                resolve(this.tornadoNode);\r\n            } else {\r\n                const playersUI = StormSunderGlobalInstance.instance.players!;\r\n                if (playersUI && playersUI.children.length > 0)\r\n                    this.tornadoNode = playersUI.children[0];\r\n\r\n                resolve(this.tornadoNode);\r\n            }\r\n        })\r\n    }\r\n\r\n    //设置玩家隐藏显示\r\n    async setPlayerVisible(visible: boolean) {\r\n        const tornado = await this.getTornadoNode();\r\n        tornado.active = visible;\r\n    }\r\n\r\n    async playerAddComponent(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.getTornadoNode().then(node => {\r\n                node.addComponent(TornadoComponent)!;\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n\r\n    /** 所有AI玩家配置数据*/\r\n    addAIPlayers() {\r\n        for (let id = 1; id <= this.aiConfigCount; id++) {\r\n            const config = AttributeBonusMgr.inst.aiConfig.getAIConfigById(id);\r\n            if (config) {\r\n                this.aiPlayersConfig.set(id, config); // 保存配置\r\n            }\r\n        }\r\n\r\n        // console.log(\"AI玩家配置数据:\", this.aiPlayersConfig);\r\n    }\r\n\r\n    /**\r\n     * 根据权重生成AI配置\r\n     */\r\n    weightGeneateAIConfig(): void {\r\n        // 获取所有AI配置\r\n        const aiConfigs = Array.from(this.aiPlayersConfig.values());\r\n\r\n        // 按权重从大到小排序\r\n        aiConfigs.sort((a, b) => b.weight - a.weight);\r\n\r\n        let accumulatedWeight = 0;\r\n        this.pickAiMap.clear();\r\n\r\n        // 计算权重并存储到pickAiMap\r\n        for (const config of aiConfigs) {\r\n            const weight = config.weight / 100; // 转换为百分比 (10 -> 0.1, 20 -> 0.2)\r\n            accumulatedWeight += weight;\r\n\r\n            // 存储累积权重和对应配置\r\n            this.pickAiMap.set(accumulatedWeight, config);\r\n        }\r\n\r\n        console.log(this.pickAiMap);\r\n    }\r\n\r\n    /**\r\n     * 根据索引获取AI配置\r\n     */\r\n    getRandomAIConfig(): any {\r\n        // 检查是否超出创建数量\r\n        if (this.aiIndex >= this.createAIPlayerCount) {\r\n            console.log('AI创建数量大于配置表数量');\r\n            return null;\r\n        }\r\n\r\n        // 从pickAiMap中获取对应索引的配置\r\n        const config = Array.from(this.pickAiMap.values())[this.aiIndex];\r\n        this.aiIndex++; // 索引递增\r\n        return config;\r\n    }\r\n\r\n    /** 重置AI索引*/\r\n    public resetAIIndex(): void {\r\n        this.aiIndex = 0;\r\n    }\r\n\r\n    /** 排行榜*/\r\n    public getRanking() {\r\n        const playersUI = StormSunderGlobalInstance.instance.players!;\r\n\r\n        // Get all players and their heights\r\n        const rankings = playersUI.children.map((node, index) => {\r\n            const tornadoComp = node.getComponent(TornadoComponent);\r\n            const isPlayer = !node.getComponent(TornadoAIComponent);\r\n            return {\r\n                index,\r\n                height: tornadoComp ? tornadoComp.height : 0,\r\n                nickName: tornadoComp ? tornadoComp.nickName : '',\r\n                isPlayer\r\n            };\r\n        });\r\n\r\n        // Sort by height in descending order\r\n        rankings.sort((a, b) => b.height - a.height);\r\n\r\n        // Add rank information\r\n        const rankedPlayers = rankings.map((player, rank) => ({\r\n            rank: rank + 1,\r\n            height: player.height,\r\n            nickName: player.nickName,\r\n            isPlayer: player.isPlayer\r\n        }));\r\n\r\n        if (rankings.length < 3) {\r\n            // If less than 3 players, return all rankings\r\n            return rankedPlayers;\r\n        }\r\n\r\n        // Find player rank if exists\r\n        const playerRank = rankedPlayers.find(p => p.isPlayer);\r\n\r\n        if (!playerRank) {\r\n            // No player found, return top 3\r\n            return rankedPlayers.slice(0, 3);\r\n        }\r\n\r\n        if (playerRank.rank <= 3) {\r\n            // Player is in top 3, return top 3\r\n            return rankedPlayers.slice(0, 3);\r\n        }\r\n\r\n        // Player is not in top 3, return top 3 + player rank\r\n        return [...rankedPlayers.slice(0, 3), playerRank];\r\n    }\r\n\r\n    /** 获取玩家的排名*/\r\n    public getPlayerRank(): number {\r\n        const rankings = this.getRanking();\r\n        const playerRank = rankings.find(p => p.isPlayer);\r\n        return playerRank ? playerRank.rank : -1;\r\n    }\r\n\r\n}\r\n\r\n"]}