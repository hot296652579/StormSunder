{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/base/utils/JsonUtil.ts"],"names":["JsonUtil","JsonAsset","resLoader","path","data","Map","get","name","has","load","callback","url","err","content","console","warn","message","set","json","release","loadAsync","Promise","resolve","reject","loadDirAsync","loadDir","assets","forEach","asset","releaseDir","delete","clear"],"mappings":"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","sourcesContent":["/*\n * @Author: dgflash\n * @Date: 2021-08-18 17:00:59\n * @LastEditors: dgflash\n * @LastEditTime: 2023-08-22 15:48:02\n */\n\nimport { JsonAsset } from \"cc\";\nimport { ResLoader, resLoader } from \"../ResLoader\";\n\n/** 资源路径 */\nconst path: string = \"config/\";\n\n/** 数据缓存 */\nconst data: Map<string, any> = new Map();\n\n/** JSON数据表工具 */\nexport class JsonUtil {\n    /**\n     * 通知资源名从缓存中获取一个Json数据表\n     * @param name  资源名\n     */\n    static get(name: string): any {\n        if (data.has(name))\n            return data.get(name);\n    }\n\n    /**\n     * 通知资源名加载Json数据表\n     * @param name      资源名\n     * @param callback  资源加载完成回调\n     */\n    static load(name: string, callback: Function): void {\n        if (data.has(name))\n            callback(data.get(name));\n        else {\n            const url = path + name;\n            resLoader.load(url, JsonAsset, (err: Error | null, content: JsonAsset) => {\n                if (err) {\n                    console.warn(err.message);\n                    callback(null);\n                }\n                else {\n                    data.set(name, content.json);\n                    resLoader.release(url);\n                    callback(content.json);\n                }\n            });\n        }\n    }\n\n    /**\n     * 异步加载Json数据表\n     * @param name 资源名\n     */\n    static loadAsync(name: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (data.has(name)) {\n                resolve(data.get(name))\n            }\n            else {\n                const url = path + name;\n                resLoader.load(url, JsonAsset, (err: Error | null, content: JsonAsset) => {\n                    if (err) {\n                        console.warn(err.message);\n                        resolve(null);\n                    }\n                    else {\n                        data.set(name, content.json);\n                        resLoader.release(url);\n                        resolve(content.json);\n                    }\n                });\n            }\n        });\n    }\n\n    /** 加载所有配置表数据到缓存中 */\n    static loadDirAsync(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resLoader.loadDir(path, (err: Error | null, assets: JsonAsset[]) => {\n                if (err) {\n                    console.warn(err.message);\n                    resolve(false);\n                }\n                else {\n                    assets.forEach(asset => {\n                        data.set(asset.name, asset.json);\n                    });\n                    resLoader.releaseDir(path);\n                    resolve(true);\n                }\n            });\n        });\n    }\n\n    /**\n     * 通过指定资源名释放资源内存\n     * @param name 资源名\n     */\n    static release(name: string) {\n        data.delete(name);\n    }\n\n    /** 清理所有数据 */\n    static clear() {\n        data.clear();\n    }\n}"]}