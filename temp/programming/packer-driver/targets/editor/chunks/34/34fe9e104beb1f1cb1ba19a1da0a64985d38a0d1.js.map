{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/easy_ui_framework/EventDispatcher.ts"],"names":["EventDispatcher","_handlersMap","instance","_instance","on","event","cb","thisArg","args","once","handlers","push","off","i","length","h","splice","clearAll","emit","arg0","arg1","arg2","arg3","arg4","apply"],"mappings":"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","sourcesContent":["/**\n * @en the classes inherit from class:EventDispatcher will have the ability to dispatch events.\n * @zh 事件派发器，继承自EventDispatcher的类将拥有事件派发能力\n * \n *  */\nexport class EventDispatcher {\n    private static _instance: EventDispatcher | null = null;\n    public static get instance(): EventDispatcher {\n        if (!this._instance) this._instance = new EventDispatcher();\n        return this._instance;\n    }\n\n    private _handlersMap: any = {};\n    public on(event: string, cb: Function, thisArg?: any, args?: [], once?: boolean) {\n        if (!event || !cb) {\n            return;\n        }\n\n        let handlers = this._handlersMap[event];\n        if (!handlers) {\n            handlers = this._handlersMap[event] = [];\n        }\n\n        handlers.push({\n            event: event,\n            cb: cb,\n            thisArg: thisArg,\n            once: once,\n            args: args\n        });\n    }\n\n    public once(event: string, cb: Function, thisArg: any, args: []) {\n        this.on(event, cb, thisArg, args, true);\n    }\n\n    public off(event: string, cb: Function, thisArg?: any, once?: boolean) {\n        let handlers = this._handlersMap[event];\n        if (!handlers) {\n            return;\n        }\n        for (let i = 0; i < handlers.length; ++i) {\n            let h = handlers[i];\n            if (h.cb == cb && h.thisArg == thisArg && h.once == once) {\n                handlers.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    public clearAll(event?: string) {\n        if (event) {\n            delete this._handlersMap[event];\n        }\n        else {\n            this._handlersMap = {};\n        }\n    }\n\n    public emit(event: string, arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any) {\n\n        let handlers = this._handlersMap[event];\n        if (!handlers || !handlers.length) {\n            return;\n        }\n        let args = [arg0, arg1, arg2, arg3, arg4];\n        for (let i = 0; i < handlers.length; ++i) {\n            let h = handlers[i];\n            if (h.event == event) {\n                h.cb.apply(h.thisArg, args);\n            }\n        }\n    }\n}"]}