{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/easy_ui_framework/UIController.ts"],"names":["AutoEventHandler","UIController","_decorator","game","isValid","Button","find","EventHandler","Toggle","ToggleContainer","Node","Component","ccclass","property","__NodeEventAgent__","onButtonClicked","evt","customEventData","btn","target","getComponent","clickEvents","i","length","h","cb","args","apply","onToggleEvent","toggle","checkEvents","_handlers","on","event","once","push","off","splice","dispose","constructor","prefab","layer","layoutCls","_instId","_prefab","_layer","_layout","node","_idBase","_controllers","instId","layout","hideAll","hide","updateAll","ctrl","onUpdate","setup","onCreated","removeFromParent","onDispose","destroy","onButtonEvent","relativeNodePath","buttonNode","agent","addComponent","handler","component","offButtonEvent","offToggleEvent","getRes"],"mappings":"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","sourcesContent":["import { _decorator, game, Prefab, isValid, Button, find, EventHandler, Toggle, ToggleContainer, Node, SkeletalAnimation, Component, EventTouch } from \"cc\";\nconst { ccclass, property } = _decorator;\n/***\n * @en internal class, used for handling node event.\n * @zh 内部类，用于节点事件监听\n * \n *  */\n@ccclass('tgxNodeEventAgent')\nexport class __NodeEventAgent__ extends Component {\n    /***\n     * @en recieve button click event and deliver them to the real handlers.\n     * @zh 接受按钮事件，并转发给真正的处理函数\n     * */\n    onButtonClicked(evt: EventTouch, customEventData) {\n        let btn = (evt.target as Node).getComponent(Button);\n        let clickEvents = btn.clickEvents;\n        for (let i = 0; i < clickEvents.length; ++i) {\n            let h = clickEvents[i];\n            if (h.customEventData == customEventData) {\n                let cb = h['$cb$'];\n                let target = h['$target$']\n                let args = h['$args$'];\n                cb.apply(target, [btn, args]);\n            }\n        }\n    }\n\n    /***\n     * @en recieve toggle event and deliver them to the real handlers.\n     * @zh 接受Toggle事件，并转发给真正的处理函数\n     * */\n    onToggleEvent(toggle: Toggle, customEventData) {\n        let checkEvents = toggle.checkEvents;\n        //if (toggle['_toggleContainer']) {\n        //    checkEvents = toggle['_toggleContainer'].checkEvents;\n        //}\n        for (let i = 0; i < checkEvents.length; ++i) {\n            let h = checkEvents[i];\n            if (h.customEventData == customEventData) {\n                let cb = h['$cb$'];\n                let target = h['$target$']\n                let args = h['$args$'];\n                cb.apply(target, [toggle, args]);\n            }\n        }\n    }\n\n}\n\n/**\n * @en manage event-handlers automatically, will remove all handlers when the ui destroyed.\n * @zh 自动管理事件，将在UI销毁时自动清理\n * */\nexport class AutoEventHandler {\n    private _handlers = [];\n    on(event: string, cb: () => void, target?: any, once?: boolean) {\n        this._handlers.push({\n            event: event,\n            cb: cb,\n            target: target,\n            once: once\n        });\n        game.on(event, cb, target, once);\n    }\n\n    off(event: string, cb: () => void, target?: any, once?: boolean) {\n        game.off(event, cb, target);\n        for (let i = 0; i < this._handlers.length; ++i) {\n            let h = this._handlers[i];\n            if (h.event == event && h.cb == cb && h.target == target && h.once == once) {\n                this._handlers.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    dispose() {\n        for (let i = 0; i < this._handlers.length; ++i) {\n            let h = this._handlers[i];\n            game.off(h.event, h.cb, h.target);\n        }\n    }\n}\n\n/**\n * @en base class of UI Panel\n * @zh 各类UI面板基类\n * */\nexport class UIController extends AutoEventHandler {\n    private static _idBase = 1000;\n\n    private static _controllers: UIController[] = [];\n    private _instId: number = 0;\n    private _prefab: string | Prefab;\n    private _layer: number;\n    private _layout: any;\n    protected node: Node;\n    constructor(prefab: string | Prefab, layer: number, layoutCls: any) {\n        super();\n        this._prefab = prefab;\n        this._layer = layer;\n        this._layout = layoutCls;\n        this._instId = UIController._idBase++;\n        UIController._controllers.push(this);\n    }\n\n    /***\n     * @en the instance id to indicate an unique ui panel.\n     * @zh 实例ID，用于标记一个唯一面板实例\n     *  */\n    public get instId(): number {\n        return this._instId;\n    }\n\n    /***\n     * @en url of the prefab used by this ui panel.\n     * @zh 本UI使用prefab路径\n     *  */\n    public get prefab(): string | Prefab {\n        return this._prefab;\n    }\n\n    /***\n     * @en layer of this ui panel.\n     * @zh 本UI所在的UI层级\n     *  */\n    public get layer(): number {\n        return this._layer;\n    }\n\n    /***\n     * @en layout of this ui panel.\n     * @zh 本UI所在的UI层级\n     *  */\n    public get layout(): any {\n        return this._layout;\n    }\n\n    /***\n     * @en hide and destroy all ui panel.\n     * @zh 隐藏并销毁所有UI面板\n     *  */\n    public static hideAll() {\n        while (this._controllers.length) {\n            this._controllers[0].hide();\n        }\n    }\n\n    //update all ui, called by UIMgr.\n    public static updateAll() {\n        for (let i = 0; i < this._controllers.length; ++i) {\n            let ctrl = this._controllers[i];\n            if (ctrl.node && isValid(ctrl.node)) {\n                this._controllers[i].onUpdate();\n            }\n        }\n    }\n\n    //setup this ui,called by UIMgr.\n    public setup(node: Node) {\n        this.node = node;\n        if (this._layout) {\n            this._layout = this.node.getComponent(this._layout);\n        }\n        //结点创建完毕，调用子类的处理函数。\n        this.onCreated();\n    }\n\n    /**\n     * @en hide and destroy this ui panel.\n     * @zh 隐藏并销毁此UI面板\n     *  */\n    public hide() {\n        this.node.removeFromParent();\n        for (let i = 0; i < UIController._controllers.length; ++i) {\n            if (UIController._controllers[i] == this) {\n                UIController._controllers.splice(i, 1);\n                break;\n            }\n        }\n        this.dispose();\n        this.onDispose();\n        this.node.destroy();\n        this.node = null;\n    }\n\n    /**\n     * @en add button event handler\n     * @zh 添加按钮事件\n     * @param relativeNodePath to indicate a button node, can pass `string`|`Node`|`Button` here.\n     * @param cb will be called when event emits. method format:(btn:Button,args:any)=>void\n     * @param target the `this` argument of `cb`\n     *  */\n    onButtonEvent(relativeNodePath: string | Node | Button, cb: Function, target?: any, args?: any) {\n\n        let buttonNode: Node = null;\n        if (relativeNodePath instanceof Node) {\n            buttonNode = relativeNodePath;\n        }\n        else if (relativeNodePath instanceof Button) {\n            buttonNode = relativeNodePath.node;\n        }\n        else {\n            buttonNode = find(relativeNodePath, this.node);\n        }\n\n        if (!buttonNode) {\n            return null;\n        }\n\n        //添加转发器\n        let agent = this.node.getComponent(__NodeEventAgent__);\n        if (!agent) {\n            agent = this.node.addComponent(__NodeEventAgent__);\n        }\n\n        let btn = buttonNode.getComponent(Button);\n        let clickEvents = btn.clickEvents;\n        let handler = new EventHandler();\n        handler.target = this.node;\n        handler.component = 'tgxNodeEventAgent';\n        handler.handler = 'onButtonClicked';\n        handler.customEventData = '' + UIController._idBase++;\n\n        //附加额外信息 供事件转发使用\n        handler['$cb$'] = cb;\n        handler['$target$'] = target;\n        handler['$args$'] = args;\n\n        clickEvents.push(handler);\n        btn.clickEvents = clickEvents;\n    }\n\n    /**\n     * @en remove button event handler\n     * @zh 移除按钮事件\n     * @param relativeNodePath to indicate a button node, can pass `string`|`Node`|`Button` here.\n     * @param cb will be called when event emits.\n     * @param target the `this` argument of `cb`\n     *  */\n    offButtonEvent(relativeNodePath: string | Node | Button, cb: Function, target: any) {\n        let buttonNode: Node = null;\n        if (relativeNodePath instanceof Node) {\n            buttonNode = relativeNodePath;\n\n        }\n        else if (relativeNodePath instanceof Button) {\n            buttonNode = relativeNodePath.node;\n        }\n        else {\n            buttonNode = find(relativeNodePath, this.node);\n        }\n\n        if (!buttonNode) {\n            return; ``\n        }\n\n        let agent = this.node.getComponent(__NodeEventAgent__);\n        if (!agent) {\n            return;\n        }\n        let btn = buttonNode.getComponent(Button);\n        if (!btn) {\n            return;\n        }\n        let clickEvents = btn.clickEvents;\n        for (let i = 0; i < clickEvents.length; ++i) {\n            let h = clickEvents[i];\n            if (h['$cb$'] == cb && h['$target$'] == target) {\n                clickEvents.splice(i, 1);\n                btn.clickEvents = clickEvents;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @en add toggle event handler\n     * @zh 添加Toggle事件\n     * @param relativeNodePath to indicate a button node, can pass `string`|`Node`|`Button` here.\n     * @param cb will be called when event emits. method format:(btn:Toggle,args:any)=>void\n     * @param target the `this` argument of `cb`\n     *  */\n\n    onToggleEvent(relativeNodePath: string | Node | Toggle | ToggleContainer, cb: Function, target?: any, args?: any) {\n        let buttonNode: Node = null;\n        if (relativeNodePath instanceof Node) {\n            buttonNode = relativeNodePath;\n        }\n        else if (relativeNodePath instanceof Toggle) {\n            buttonNode = relativeNodePath.node;\n        }\n        else if (relativeNodePath instanceof ToggleContainer) {\n            buttonNode = relativeNodePath.node;\n        }\n        else {\n            buttonNode = find(relativeNodePath, this.node);\n        }\n\n        if (!buttonNode) {\n            return null;\n        }\n\n        //添加转发器\n        let agent = this.node.getComponent(__NodeEventAgent__);\n        if (!agent) {\n            agent = this.node.addComponent(__NodeEventAgent__);\n        }\n\n        let btn = buttonNode.getComponent(Toggle) as any;\n        if (!btn) {\n            btn = buttonNode.getComponent(ToggleContainer) as any;\n        }\n        let checkEvents = btn.checkEvents;\n        let handler = new EventHandler();\n        handler.target = this.node;\n        handler.component = 'tgxNodeEventAgent';\n        handler.handler = 'onToggleEvent';\n        handler.customEventData = '' + UIController._idBase++;\n\n        //附加额外信息 供事件转发使用\n        handler['$cb$'] = cb;\n        handler['$target$'] = target;\n        handler['$args$'] = args;\n\n        checkEvents.push(handler);\n        btn.checkEvents = checkEvents;\n    }\n\n    /**\n     * @en remove toggle event handler\n     * @zh 移除Toggle事件\n     * @param relativeNodePath to indicate a button node, can pass `string`|`Node`|`Button` here.\n     * @param cb will be called when event emits. method format:(btn:Toggle,args:any)=>void\n     * @param target the `this` argument of `cb`\n     *  */\n    offToggleEvent(relativeNodePath: string | Node | Toggle | ToggleContainer, cb: Function, target: any) {\n        let buttonNode: Node = null;\n        if (relativeNodePath instanceof Node) {\n            buttonNode = relativeNodePath;\n        }\n        else if (relativeNodePath instanceof Toggle) {\n            buttonNode = relativeNodePath.node;\n        }\n        else if (relativeNodePath instanceof ToggleContainer) {\n            buttonNode = relativeNodePath.node;\n        }\n        else {\n            buttonNode = find(relativeNodePath, this.node);\n        }\n\n        if (!buttonNode) {\n            return null;\n        }\n\n        //添加转发器\n        let agent = this.node.getComponent(__NodeEventAgent__);\n        if (!agent) {\n            return;\n        }\n        let btn = buttonNode.getComponent(Toggle) as any;\n        if (!btn) {\n            btn = buttonNode.getComponent(ToggleContainer) as any;\n        }\n        let checkEvents = btn.checkEvents;\n        for (let i = 0; i < checkEvents.length; ++i) {\n            let h = checkEvents[i];\n            if (h['$cb$'] == cb && h['$target$'] == target) {\n                checkEvents.splice(i, 1);\n                btn.checkEvents = checkEvents;\n                break;\n            }\n        }\n    }\n\n    /***\n     * @en the extra resource needed by this ui panel.the ui will not be created until these res loaded.\n     * @zh 本UI使用的依赖资源.UI会等这些资源加载完成后才创建。\n     *  */\n    public getRes(): [] {\n        return [];\n    }\n\n    //子类的所有操作，需要在这个函数之后。\n    protected onCreated() { }\n    //销毁\n    protected onDispose() { }\n    //\n    protected onUpdate() { }\n}"]}