{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/GameUtil.ts"],"names":["GameUtil","Vec2","v2","Rect","Vec3","StormSunderGlobalInstance","formatToTimeString","totalSeconds","minutes","Math","floor","seconds","formattedMinutes","String","padStart","formattedSeconds","formatWeight","weight","inTons","hexToRGBA","hex","alpha","replace","length","split","map","char","join","r","parseInt","substring","g","b","a","getWorldPositionAsVec2","node","worldPosition","getWorldPosition","clone","x","y","calculateRayEnd","fromNode","rayLength","rotation","angle","direction","adjustedAngle","cos","PI","sin","objs","obje","add","multiplyScalar","isAABBIntersecting","rect1","rect2","xMax","xMin","yMax","yMin","isPointInPolygon","point","polygonPoints","isInside","i","j","xi","yi","xj","yj","intersect","isCircleIntersectingLine","circleCenter","radius","lineStart","lineEnd","lineDir","subtract","toCircle","projection","dot","normalize","closestPoint","distance","getCircleAABB","circleCollider","center","minX","minY","size","getPolygonAABB","polygonCollider","points","worldPoints","maxX","maxY","p","isPolygonAndCircleIntersecting","start","end","delay","Promise","resolve","setTimeout","worldToScreenLocal","target","localNode","targetWorldPos","mainCamera","instance","camera","screenPos","worldToScreen","uiPos","convertToUINode"],"mappings":"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","sourcesContent":["import { Vec2, Node, v2, PolygonCollider2D, Rect, CircleCollider2D, Vec3, UITransform } from \"cc\";\r\nimport { StormSunderGlobalInstance } from \"./StormSunderGlobalInstance\";\r\n\r\n/** 游戏工具类 */\r\nexport class GameUtil {\r\n\r\n    /** 转换成hh:mm格式*/\r\n    static formatToTimeString(totalSeconds: number): string {\r\n        const minutes = Math.floor(totalSeconds / 60);\r\n        const seconds = totalSeconds % 60;\r\n        const formattedMinutes = String(minutes).padStart(2, '0');\r\n        const formattedSeconds = String(seconds).padStart(2, '0');\r\n        return `${formattedMinutes}:${formattedSeconds}`;\r\n    }\r\n\r\n    /** 重量单位转换*/\r\n    static formatWeight(weight: number): string {\r\n        if (weight < 1000) {\r\n            return `${weight}KG`;\r\n        }\r\n        // 等于或超过1000时，转换为吨（T），保留两位小数并向下取整\r\n        const inTons = Math.floor((weight / 1000) * 100) / 100;\r\n        return `${inTons}T`;\r\n    }\r\n\r\n    /**\r\n     * 将 16 进制颜色转换为 RGBA 格式\r\n     * @param hex - 16 进制颜色字符串 (#FFE73A 或 FFE73A)\r\n     * @param alpha - 可选的透明度值（范围 0~255，默认 255）\r\n     * @returns Color - 包含 r, g, b, a 的对象\r\n     */\r\n    static hexToRGBA(hex: string, alpha: number = 255): { r: number; g: number; b: number; a: number } {\r\n        // 去掉可能存在的 '#' 前缀\r\n        hex = hex.replace(/^#/, '');\r\n\r\n        // 如果是简写格式 (如 #F7A)，转换为完整格式 (FF77AA)\r\n        if (hex.length === 3) {\r\n            hex = hex.split('').map(char => char + char).join('');\r\n        }\r\n\r\n        // 转换为 r, g, b\r\n        const r = parseInt(hex.substring(0, 2), 16);\r\n        const g = parseInt(hex.substring(2, 4), 16);\r\n        const b = parseInt(hex.substring(4, 6), 16);\r\n\r\n        // 返回 RGBA 颜色对象\r\n        return { r, g, b, a: alpha };\r\n    }\r\n\r\n    /** 获取节点的世界坐标并转换为 Vec2*/\r\n    static getWorldPositionAsVec2(node: Node): Vec2 {\r\n        const worldPosition = node.getWorldPosition().clone(); // 获取世界坐标\r\n        return v2(worldPosition.x, worldPosition.y); // 转换为 Vec2\r\n    }\r\n\r\n    /** 射线检测\r\n     * @param fromNode 起始节点\r\n     * @param rayLength 射线长度\r\n     * @return 射线结束点的世界坐标 (作为 Vec2)\r\n    */\r\n    static calculateRayEnd(fromNode: Node, rayLength: number): Vec2 {\r\n        const rotation = fromNode.angle;\r\n\r\n        // 根据角度计算方向向量\r\n        let direction = v2(0, 0);\r\n        if (rotation === -90) {\r\n            direction = v2(1, 0); // 朝右\r\n        } else if (rotation === 0) {\r\n            direction = v2(0, 1); // 朝上\r\n        } else if (rotation === 90) {\r\n            direction = v2(-1, 0); // 朝左\r\n        } else if (rotation === 180) {\r\n            direction = v2(0, -1); // 朝下\r\n        } else {\r\n            const adjustedAngle = rotation - 90;\r\n            direction = v2(-Math.cos(adjustedAngle * (Math.PI / 180)), Math.sin(-adjustedAngle * (Math.PI / 180)));\r\n        }\r\n\r\n        // 计算射线起点坐标\r\n        const objs = this.getWorldPositionAsVec2(fromNode);\r\n        const obje = objs.add(direction.multiplyScalar(rayLength));\r\n\r\n        return obje;\r\n    }\r\n\r\n    /**\r\n     * 判断两个 AABB 是否相交\r\n     */\r\n    static isAABBIntersecting(rect1: Rect, rect2: Rect): boolean {\r\n        return !(\r\n            rect1.xMax < rect2.xMin ||\r\n            rect1.xMin > rect2.xMax ||\r\n            rect1.yMax < rect2.yMin ||\r\n            rect1.yMin > rect2.yMax\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 检查点是否在多边形内\r\n     * @param point 点的坐标\r\n     * @param polygonPoints 多边形的顶点数组\r\n     * @returns 是否在多边形内\r\n     */\r\n    static isPointInPolygon(point: Vec2, polygonPoints: Readonly<Vec2[]>): boolean {\r\n        let isInside = false;\r\n        for (let i = 0, j = polygonPoints.length - 1; i < polygonPoints.length; j = i++) {\r\n            const xi = polygonPoints[i].x, yi = polygonPoints[i].y;\r\n            const xj = polygonPoints[j].x, yj = polygonPoints[j].y;\r\n\r\n            const intersect = (yi > point.y) !== (yj > point.y) &&\r\n                point.x < ((xj - xi) * (point.y - yi)) / (yj - yi) + xi;\r\n            if (intersect) isInside = !isInside;\r\n        }\r\n        return isInside;\r\n    }\r\n\r\n    /**\r\n     * 检查圆是否与线段相交\r\n     * @param circleCenter 圆心坐标\r\n     * @param radius 圆的半径\r\n     * @param lineStart 线段起点\r\n     * @param lineEnd 线段终点\r\n     * @returns 是否相交\r\n     */\r\n    static isCircleIntersectingLine(circleCenter: Vec2, radius: number, lineStart: Vec2, lineEnd: Vec2): boolean {\r\n        const lineDir = lineEnd.subtract(lineStart);\r\n        const toCircle = circleCenter.subtract(lineStart);\r\n        const projection = toCircle.dot(lineDir.normalize());\r\n\r\n        const closestPoint = lineStart.add(lineDir.normalize().multiplyScalar(projection));\r\n        const distance = circleCenter.subtract(closestPoint).length();\r\n\r\n        return distance <= radius;\r\n    }\r\n\r\n    /**\r\n     * 获取圆形碰撞器的 AABB（轴对齐边界框）\r\n     */\r\n    static getCircleAABB(circleCollider: CircleCollider2D): Rect {\r\n        const radius = circleCollider.radius;\r\n        const center = circleCollider.worldPosition;\r\n\r\n        const minX = center.x - radius;\r\n        const minY = center.y - radius;\r\n        const size = radius * 2;\r\n\r\n        return new Rect(minX, minY, size, size);\r\n    }\r\n\r\n    /**\r\n     * 获取多边形碰撞器的 AABB（轴对齐边界框）\r\n     */\r\n    static getPolygonAABB(polygonCollider: PolygonCollider2D): Rect {\r\n        const points = polygonCollider.worldPoints;\r\n        let minX = points[0].x;\r\n        let maxX = points[0].x;\r\n        let minY = points[0].y;\r\n        let maxY = points[0].y;\r\n\r\n        for (let i = 1; i < points.length; i++) {\r\n            const p = points[i];\r\n            if (p.x < minX) minX = p.x;\r\n            if (p.x > maxX) maxX = p.x;\r\n            if (p.y < minY) minY = p.y;\r\n            if (p.y > maxY) maxY = p.y;\r\n        }\r\n\r\n        return new Rect(minX, minY, maxX - minX, maxY - minY);\r\n    }\r\n\r\n    /**\r\n     * 判断多边形与圆是否相交\r\n     * @param polygonCollider 多边形碰撞器\r\n     * @param circleCollider 圆形碰撞器\r\n     * @returns 是否相交\r\n     */\r\n    static isPolygonAndCircleIntersecting(\r\n        polygonCollider: PolygonCollider2D,\r\n        circleCollider: CircleCollider2D\r\n    ): boolean {\r\n        // 1. AABB 检测\r\n        // const polygonAABB = this.getPolygonAABB(polygonCollider);\r\n        // const circleAABB = this.getCircleAABB(circleCollider);\r\n\r\n        // if (!this.isAABBIntersecting(polygonAABB, circleAABB)) {\r\n        //     return false;\r\n        // }\r\n\r\n        // 2. 精确检测\r\n        const circleCenter = new Vec2(circleCollider.node.worldPosition.x, circleCollider.node.worldPosition.y); // 圆心\r\n        const radius = circleCollider.radius;\r\n\r\n        // 检查圆心是否在多边形内部\r\n        if (this.isPointInPolygon(circleCenter, polygonCollider.worldPoints)) {\r\n            return true;\r\n        }\r\n\r\n        // 检查圆是否与多边形的边相交\r\n        const points = polygonCollider.worldPoints;\r\n        for (let i = 0; i < points.length; i++) {\r\n            const start = points[i];\r\n            const end = points[(i + 1) % points.length];\r\n            if (this.isCircleIntersectingLine(circleCenter, radius, start, end)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    static delay(seconds) {\r\n        return new Promise(resolve => setTimeout(resolve, seconds * 1000));\r\n    }\r\n\r\n    /** 3D空间坐标转屏幕坐标*/\r\n    static worldToScreenLocal(target: Node, localNode: Node): Vec3 {\r\n        const targetWorldPos = target.worldPosition.clone();\r\n        const mainCamera = StormSunderGlobalInstance.instance.camera;\r\n        const screenPos = mainCamera.worldToScreen(targetWorldPos);\r\n        const uiPos = new Vec3();\r\n        // localNode.getComponent(UITransform)!.convertToNodeSpaceAR(\r\n        //     new Vec3(screenPos.x, screenPos.y, screenPos.z),\r\n        //     uiPos\r\n        // );\r\n        mainCamera.convertToUINode(target.worldPosition, localNode, uiPos);\r\n        return uiPos;\r\n    }\r\n\r\n}"]}