{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/base/ResolutionAutoFit.ts"],"names":["_decorator","Component","view","screen","size","ResolutionPolicy","ccclass","property","CHECK_INTERVAL","ResolutionAutoFit","_oldSize","lastCheckTime","start","adjustResolutionPolicy","update","deltaTime","winSize","windowSize","equals","ratio","width","height","drs","getDesignResolutionSize","drsRatio","setResolutionPolicy","FIXED_HEIGHT","FIXED_WIDTH","set"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAcC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,gB,OAAAA,gB;;;;;;;;;OACpD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;AAExBQ,MAAAA,c,GAAiB,G;;mCAGVC,iB,WADZH,OAAO,CAAC,sBAAD,C,gBAAR,MACaG,iBADb,SACuCR,SADvC,CACiD;AAAA;AAAA;AAAA,eACrCS,QADqC,GACrBN,IAAI,EADiB;AAAA,eAMrCO,aANqC,GAMrB,CANqB;AAAA;;AAE7CC,QAAAA,KAAK,GAAG;AACJ,eAAKC,sBAAL;AACH;;AAGDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,eAAKJ,aAAL,IAAoBI,SAApB;;AACA,cAAG,KAAKJ,aAAL,GAAqBH,cAAxB,EAAuC;AACnC;AACH;;AACD,eAAKG,aAAL,GAAqB,CAArB;AAEA,eAAKE,sBAAL;AACH;;AAEDA,QAAAA,sBAAsB,GAAE;AACpB,cAAIG,OAAO,GAAGb,MAAM,CAACc,UAArB;;AACA,cAAG,CAAC,KAAKP,QAAL,CAAcQ,MAAd,CAAqBF,OAArB,CAAJ,EAAkC;AAC9B,gBAAIG,KAAK,GAAGH,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACK,MAApC;AACA,gBAAIC,GAAG,GAAGpB,IAAI,CAACqB,uBAAL,EAAV;AACA,gBAAIC,QAAQ,GAAGF,GAAG,CAACF,KAAJ,GAAYE,GAAG,CAACD,MAA/B;;AAEA,gBAAGF,KAAK,GAAGK,QAAX,EAAoB;AAChB;AACAtB,cAAAA,IAAI,CAACuB,mBAAL,CAAyBpB,gBAAgB,CAACqB,YAA1C;AACH,aAHD,MAII;AACA;AACAxB,cAAAA,IAAI,CAACuB,mBAAL,CAAyBpB,gBAAgB,CAACsB,WAA1C;AACH;;AACD,iBAAKjB,QAAL,CAAckB,GAAd,CAAkBZ,OAAlB;AACH;AACJ;;AAlC4C,O","sourcesContent":["import { _decorator, Component, view, screen, Size, size, ResolutionPolicy } from 'cc';\nconst { ccclass, property } = _decorator;\n\nconst CHECK_INTERVAL = 0.1;\n\n@ccclass('tgxResolutionAutoFit')\nexport class ResolutionAutoFit extends Component {\n    private _oldSize:Size = size();\n    start() {\n        this.adjustResolutionPolicy();\n    }\n\n    private lastCheckTime = 0;\n    update(deltaTime: number) {\n        this.lastCheckTime+=deltaTime;\n        if(this.lastCheckTime < CHECK_INTERVAL){\n            return;\n        }\n        this.lastCheckTime = 0;\n\n        this.adjustResolutionPolicy();\n    }\n\n    adjustResolutionPolicy(){\n        let winSize = screen.windowSize;\n        if(!this._oldSize.equals(winSize)){\n            let ratio = winSize.width / winSize.height;\n            let drs = view.getDesignResolutionSize();\n            let drsRatio = drs.width / drs.height;\n\n            if(ratio > drsRatio){\n                //wider than desgin. fixed height\n                view.setResolutionPolicy(ResolutionPolicy.FIXED_HEIGHT);\n            }\n            else{\n                //\n                view.setResolutionPolicy(ResolutionPolicy.FIXED_WIDTH);\n            }\n            this._oldSize.set(winSize);\n        }\n    }\n}\n\n"]}