{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/base/ResLoader.ts"],"names":["ResLoader","Asset","assetManager","error","js","resources","warn","defaultBundleName","gameBundleName","cdn","bundles","Map","maxConcurrency","downloader","value","maxRequestsPerFrame","maxRetryCount","retryInterval","init","config","enable","bundleName","packages","set","loadRemote","url","options","onComplete","loadBundle","v","Promise","resolve","reject","version","err","bundle","removeBundle","get","releaseAll","preload","paths","type","onProgress","args","Array","parseLoadResArgs","loadByArgs","preloadAsync","data","message","preloadDir","dir","load","loadAsync","asset","loadDir","release","path","getBundle","releasePrefabtDepsRecursively","releaseDir","infos","getDirWithPath","map","info","uuid","decRef","assets","pathsOut","typeOut","onProgressOut","onCompleteOut","undefined","isValidType","isChildClassOf","loadByBundleAndArgs","dump","forEach","key","console","log","count","resLoader"],"mappings":"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","sourcesContent":["import { Asset, AssetManager, __private, assetManager, error, js, resources, warn } from \"cc\";\n\nexport type AssetType<T = Asset> = __private._types_globals__Constructor<T> | null;\nexport type Paths = string | string[];\nexport type ProgressCallback = ((finished: number, total: number, item: AssetManager.RequestItem) => void) | null;\nexport type CompleteCallback = any;\nexport type IRemoteOptions = { [k: string]: any; ext?: string; } | null;\n\ninterface ILoadResArgs<T extends Asset> {\n    /** 资源包名 */\n    bundle?: string;\n    /** 资源文件夹名 */\n    dir?: string;\n    /** 资源路径 */\n    paths: Paths;\n    /** 资源类型 */\n    type: AssetType<T>;\n    /** 资源加载进度 */\n    onProgress: ProgressCallback;\n    /** 资源加载完成 */\n    onComplete: CompleteCallback;\n    /** 是否为预加载 */\n    preload?: boolean;\n}\n\n/** \n * 游戏资源管理\n * 1、加载默认resources文件夹中资源\n * 2、加载默认bundle远程资源\n * 3、主动传递bundle名时，优先加载传递bundle名资源包中的资源\n * \n * @help    https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037901&doc_id=2873565\n */\nexport class ResLoader {\n    //#region 资源配置数据\n    /** 全局默认加载的资源包名 */\n    defaultBundleName: string = \"module_basic\";\n    gameBundleName: string = \"module_storm_sunder\";\n    /** 是否使用远程 CDN 资源 */\n    cdn: boolean = false;\n\n    /** 下载时的最大并发数 - 项目设置 -> 项目数据 -> 资源下载并发数，设置默认值；初始值为15 */\n    get maxConcurrency() {\n        return assetManager.downloader.maxConcurrency;\n    }\n    set maxConcurrency(value) {\n        assetManager.downloader.maxConcurrency = value;\n    }\n\n    /** 下载时每帧可以启动的最大请求数 - 默认值为15 */\n    get maxRequestsPerFrame() {\n        return assetManager.downloader.maxRequestsPerFrame;\n    }\n    set maxRequestsPerFrame(value) {\n        assetManager.downloader.maxRequestsPerFrame = value;\n    }\n\n    /** 失败重试次数 - 默认值为0 */\n    get maxRetryCount() {\n        return assetManager.downloader.maxRetryCount;\n    }\n    set maxRetryCount(value) {\n        assetManager.downloader.maxRetryCount = value;\n    }\n\n    /** 重试的间隔时间，单位为毫秒 - 默认值为2000毫秒 */\n    get retryInterval() {\n        return assetManager.downloader.retryInterval;\n    }\n    set retryInterval(value) {\n        assetManager.downloader.retryInterval = value;\n    }\n\n    /** 资源包配置 */\n    private bundles: Map<string, string> = new Map<string, string>();\n    //#endregion\n\n    init(config: any) {\n        this.cdn = config.enable;\n        for (let bundleName in config.packages) {\n            this.bundles.set(bundleName, config.packages[bundleName]);\n        }\n    }\n\n    //#region 加载远程资源\n    /**\n     * 加载远程资源\n     * @param url           资源地址\n     * @param options       资源参数，例：{ ext: \".png\" }\n     * @param onComplete    加载完成回调\n     * @example\nvar opt: IRemoteOptions = { ext: \".png\" };\nvar onComplete = (err: Error | null, data: ImageAsset) => {\n    const texture = new Texture2D();\n    texture.image = data;\n    \n    const spriteFrame = new SpriteFrame();\n    spriteFrame.texture = texture;\n    \n    var sprite = this.sprite.addComponent(Sprite);\n    sprite.spriteFrame = spriteFrame;\n}\noops.res.loadRemote<ImageAsset>(this.url, opt, onComplete);\n     */\n    loadRemote<T extends Asset>(url: string, options: IRemoteOptions | null, onComplete?: CompleteCallback): void;\n    loadRemote<T extends Asset>(url: string, onComplete?: CompleteCallback): void;\n    loadRemote<T extends Asset>(url: string, ...args: any): void {\n        let options: IRemoteOptions | null = null;\n        let onComplete: CompleteCallback = null;\n        if (args.length == 2) {\n            options = args[0];\n            onComplete = args[1];\n        }\n        else {\n            onComplete = args[0];\n        }\n        assetManager.loadRemote<T>(url, options, onComplete);\n    }\n    //#endregion\n\n    //#region 资源包管理\n    /**\n     * 加载资源包\n     * @param url       资源地址\n     * @param v         资源MD5版本号\n     * @example\nvar serverUrl = \"http://192.168.1.8:8080/\";         // 服务器地址\nvar md5 = \"8e5c0\";                                  // Cocos Creator 构建后的MD5字符\nawait oops.res.loadBundle(serverUrl,md5);\n     */\n    loadBundle(url: string, v?: string) {\n        return new Promise<AssetManager.Bundle>((resolve, reject) => {\n            assetManager.loadBundle(url, { version: v }, (err, bundle: AssetManager.Bundle) => {\n                if (err) {\n                    return error(err);\n                }\n                resolve(bundle);\n            });\n        });\n    }\n\n    /**\n     * 释放资源包与包中所有资源\n     * @param bundleName 资源地址\n     */\n    removeBundle(bundleName: string) {\n        let bundle = assetManager.bundles.get(bundleName);\n        if (bundle) {\n            bundle.releaseAll();\n            assetManager.removeBundle(bundle);\n        }\n    }\n    //#endregion\n\n    //#region 预加载资源\n    /**\n     * 加载一个资源\n     * @param bundleName    远程包名\n     * @param paths         资源路径\n     * @param type          资源类型\n     * @param onProgress    加载进度回调\n     * @param onComplete    加载完成回调\n     */\n    preload<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preload<T extends Asset>(bundleName: string, paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preload<T extends Asset>(bundleName: string, paths: Paths, onComplete?: CompleteCallback): void;\n    preload<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    preload<T extends Asset>(paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preload<T extends Asset>(paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preload<T extends Asset>(paths: Paths, onComplete?: CompleteCallback): void;\n    preload<T extends Asset>(paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    preload<T extends Asset>(\n        bundleName: string,\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onProgress?: ProgressCallback | CompleteCallback,\n        onComplete?: CompleteCallback,\n    ) {\n        let args: ILoadResArgs<Asset> | null = null;\n        if (typeof paths === \"string\" || paths instanceof Array) {\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\n            args.bundle = this.defaultBundleName;\n        }\n        args.preload = true;\n        this.loadByArgs(args);\n    }\n\n    /**\n     * 异步加载一个资源\n     * @param bundleName    远程包名\n     * @param paths         资源路径\n     * @param type          资源类型\n     */\n    preloadAsync<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>): Promise<AssetManager.RequestItem>;\n    preloadAsync<T extends Asset>(bundleName: string, paths: Paths): Promise<AssetManager.RequestItem>;\n    preloadAsync<T extends Asset>(paths: Paths, type: AssetType<T>): Promise<AssetManager.RequestItem>;\n    preloadAsync<T extends Asset>(paths: Paths): Promise<AssetManager.RequestItem>;\n    preloadAsync<T extends Asset>(bundleName: string,\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback): Promise<AssetManager.RequestItem> {\n        return new Promise((resolve, reject) => {\n            this.preload(bundleName, paths, type, (err: Error | null, data: AssetManager.RequestItem) => {\n                if (err) {\n                    warn(err.message);\n                }\n                resolve(data);\n            });\n        });\n    }\n\n    /**\n     * 预加载文件夹中的资源\n     * @param bundleName    远程包名\n     * @param dir           文件夹名\n     * @param type          资源类型\n     * @param onProgress    加载进度回调\n     * @param onComplete    加载完成回调\n     */\n    preloadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preloadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preloadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback): void;\n    preloadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    preloadDir<T extends Asset>(dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preloadDir<T extends Asset>(dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    preloadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback): void;\n    preloadDir<T extends Asset>(dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    preloadDir<T extends Asset>(\n        bundleName: string,\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onProgress?: ProgressCallback | CompleteCallback,\n        onComplete?: CompleteCallback,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof dir === \"string\") {\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\n            args.bundle = this.defaultBundleName;\n        }\n        args.dir = args.paths as string;\n        args.preload = true;\n        this.loadByArgs(args);\n    }\n    //#endregion\n\n    //#region 资源加载、获取、释放\n    /**\n     * 加载一个资源\n     * @param bundleName    远程包名\n     * @param paths         资源路径\n     * @param type          资源类型\n     * @param onProgress    加载进度回调\n     * @param onComplete    加载完成回调\n     * @example\noops.res.load(\"spine_path\", sp.SkeletonData, (err: Error | null, sd: sp.SkeletonData) => {\n\n});\n     */\n    load<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    load<T extends Asset>(bundleName: string, paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    load<T extends Asset>(bundleName: string, paths: Paths, onComplete?: CompleteCallback): void;\n    load<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    load<T extends Asset>(paths: Paths, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    load<T extends Asset>(paths: Paths, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    load<T extends Asset>(paths: Paths, onComplete?: CompleteCallback): void;\n    load<T extends Asset>(paths: Paths, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    load<T extends Asset>(\n        bundleName: string,\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onProgress?: ProgressCallback | CompleteCallback,\n        onComplete?: CompleteCallback,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof paths === \"string\" || paths instanceof Array) {\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\n            args.bundle = this.defaultBundleName;\n        }\n        this.loadByArgs(args);\n    }\n\n    /**\n     * 异步加载一个资源\n     * @param bundleName    远程包名\n     * @param paths         资源路径\n     * @param type          资源类型\n     */\n    loadAsync<T extends Asset>(bundleName: string, paths: Paths, type: AssetType<T>): Promise<T>;\n    loadAsync<T extends Asset>(bundleName: string, paths: Paths): Promise<T>;\n    loadAsync<T extends Asset>(paths: Paths, type: AssetType<T>): Promise<T>;\n    loadAsync<T extends Asset>(paths: Paths): Promise<T>;\n    loadAsync<T extends Asset>(bundleName: string,\n        paths?: Paths | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback): Promise<T> {\n        return new Promise((resolve, reject) => {\n            this.load(bundleName, paths, type, (err: Error | null, asset: T) => {\n                if (err) {\n                    warn(err.message);\n                }\n                resolve(asset);\n            });\n        });\n    }\n\n    /**\n     * 加载文件夹中的资源\n     * @param bundleName    远程包名\n     * @param dir           文件夹名\n     * @param type          资源类型\n     * @param onProgress    加载进度回调\n     * @param onComplete    加载完成回调\n     * @example\n// 加载进度事件\nvar onProgressCallback = (finished: number, total: number, item: any) => {\n    console.log(\"资源加载进度\", finished, total);\n}\n\n// 加载完成事件\nvar onCompleteCallback = () => {\n    console.log(\"资源加载完成\");\n}\noops.res.loadDir(\"game\", onProgressCallback, onCompleteCallback);\n     */\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    loadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    loadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback): void;\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    loadDir<T extends Asset>(dir: string, type: AssetType<T>, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    loadDir<T extends Asset>(dir: string, onProgress: ProgressCallback, onComplete: CompleteCallback): void;\n    loadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback): void;\n    loadDir<T extends Asset>(dir: string, type: AssetType<T>, onComplete?: CompleteCallback): void;\n    loadDir<T extends Asset>(\n        bundleName: string,\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onProgress?: ProgressCallback | CompleteCallback,\n        onComplete?: CompleteCallback,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof dir === \"string\") {\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\n            args.bundle = this.defaultBundleName;\n        }\n        args.dir = args.paths as string;\n        this.loadByArgs(args);\n    }\n\n    /**\n     * 通过资源相对路径释放资源\n     * @param path          资源路径\n     * @param bundleName    远程资源包名\n     */\n    release(path: string, bundleName: string = this.defaultBundleName) {\n        const bundle = assetManager.getBundle(bundleName);\n        if (bundle) {\n            const asset = bundle.get(path);\n            if (asset) {\n                this.releasePrefabtDepsRecursively(asset);\n            }\n        }\n    }\n\n    /**\n     * 通过相对文件夹路径删除所有文件夹中资源\n     * @param path          资源文件夹路径\n     * @param bundleName    远程资源包名\n     */\n    releaseDir(path: string, bundleName: string = this.defaultBundleName) {\n        const bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\n        if (bundle) {\n            var infos = bundle.getDirWithPath(path);\n            if (infos) {\n                infos.map((info) => {\n                    this.releasePrefabtDepsRecursively(info.uuid);\n                });\n            }\n\n            if (path == \"\" && bundleName != \"resources\") {\n                assetManager.removeBundle(bundle);\n            }\n        }\n    }\n\n    /** 释放预制依赖资源 */\n    private releasePrefabtDepsRecursively(uuid: string | Asset) {\n        if (uuid instanceof Asset) {\n            uuid.decRef();\n            // assetManager.releaseAsset(uuid);\n        }\n        else {\n            const asset = assetManager.assets.get(uuid);\n            if (asset) {\n                asset.decRef();\n                // assetManager.releaseAsset(asset);\n            }\n        }\n    }\n\n    /**\n     * 获取资源\n     * @param path          资源路径\n     * @param type          资源类型\n     * @param bundleName    远程资源包名\n     */\n    get<T extends Asset>(path: string, type?: AssetType<T>, bundleName: string = this.defaultBundleName): T | null {\n        var bundle: AssetManager.Bundle = assetManager.getBundle(bundleName)!;\n        return bundle.get(path, type);\n    }\n    //#endregion\n\n    private parseLoadResArgs<T extends Asset>(\n        paths: Paths,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onProgress?: AssetType<T> | ProgressCallback | CompleteCallback,\n        onComplete?: ProgressCallback | CompleteCallback\n    ) {\n        let pathsOut: any = paths;\n        let typeOut: any = type;\n        let onProgressOut: any = onProgress;\n        let onCompleteOut: any = onComplete;\n        if (onComplete === undefined) {\n            const isValidType = js.isChildClassOf(type as AssetType, Asset);\n            if (onProgress) {\n                onCompleteOut = onProgress as CompleteCallback;\n                if (isValidType) {\n                    onProgressOut = null;\n                }\n            }\n            else if (onProgress === undefined && !isValidType) {\n                onCompleteOut = type as CompleteCallback;\n                onProgressOut = null;\n                typeOut = null;\n            }\n            if (onProgress !== undefined && !isValidType) {\n                onProgressOut = type as ProgressCallback;\n                typeOut = null;\n            }\n        }\n        return { paths: pathsOut, type: typeOut, onProgress: onProgressOut, onComplete: onCompleteOut };\n    }\n\n    private loadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\n        if (args.dir) {\n            if (args.preload) {\n                bundle.preloadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\n            }\n            else {\n                bundle.loadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\n            }\n        }\n        else {\n            if (args.preload) {\n                bundle.preload(args.paths as any, args.type, args.onProgress, args.onComplete);\n            }\n            else {\n                bundle.load(args.paths as any, args.type, args.onProgress, args.onComplete);\n            }\n        }\n    }\n\n    private async loadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\n        if (args.bundle) {\n            let bundle = assetManager.bundles.get(args.bundle);\n            // 获取缓存中的资源包\n            if (bundle) {\n                this.loadByBundleAndArgs(bundle, args);\n            }\n            // 自动加载资源包\n            else {\n                const v = this.cdn ? this.bundles.get(args.bundle) : \"\";\n                bundle = await this.loadBundle(args.bundle, v);\n                if (bundle) this.loadByBundleAndArgs(bundle, args);\n            }\n        }\n        // 默认资源包\n        else {\n            this.loadByBundleAndArgs(resources, args);\n        }\n    }\n\n    /** 打印缓存中所有资源信息 */\n    dump() {\n        assetManager.assets.forEach((value: Asset, key: string) => {\n            console.log(assetManager.assets.get(key));\n        })\n        console.log(`当前资源总数:${assetManager.assets.count}`);\n    }\n}\n\nexport const resLoader = new ResLoader();"]}