{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Manager/PathfindingManager.ts"],"names":["PathfindingManager","tween","getInstance","instance","moveTo","node","targetPosition","duration","to","position","start","followTarget","aiComponent","targetNode","moveSpeed","cb","schedule","isValid","aiNode","targetPos","worldPosition","myPos","direction","clone","subtract","normalize","moveStep","multiplyScalar","setWorldPosition","add"],"mappings":";;;yEAEaA,kB;;;;;;;;;AAFQC,MAAAA,K,OAAAA,K;;;;;;;;;oCAERD,kB,GAAN,MAAMA,kBAAN,CAAyB;AAGV,eAAXE,WAAW,GAAuB;AACrC,cAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,iBAAKA,QAAL,GAAgB,IAAIH,kBAAJ,EAAhB;AACH;;AACD,iBAAO,KAAKG,QAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,MAAM,CAACC,IAAD,EAAaC,cAAb,EAAmCC,QAAnC,EAAqD;AAC9DN,UAAAA,KAAK,CAACI,IAAD,CAAL,CACKG,EADL,CACQD,QADR,EACkB;AAAEE,YAAAA,QAAQ,EAAEH;AAAZ,WADlB,EAEKI,KAFL;AAGH;AAED;;;AACAC,QAAAA,YAAY,CAACC,WAAD,EAAyBC,UAAzB,EAA2CC,SAA3C,EAA8DC,EAA9D,EAA4E;AACpF,cAAI,CAACF,UAAL,EAAiB;AAEjBD,UAAAA,WAAW,CAACI,QAAZ,CAAqB,MAAM;AACvB,gBAAI,CAACH,UAAU,CAACI,OAAhB,EAAyB;AACrB,kBAAIF,EAAJ,EAAQA,EAAE;AACV;AACH,aAJsB,CAMvB;;;AACA,gBAAMG,MAAM,GAAGN,WAAW,CAACP,IAA3B;AACA,gBAAMc,SAAS,GAAGN,UAAU,CAACO,aAA7B;AACA,gBAAMC,KAAK,GAAGH,MAAM,CAACE,aAArB;AAEA,gBAAME,SAAS,GAAGH,SAAS,CAACI,KAAV,GAAkBC,QAAlB,CAA2BH,KAA3B,EAAkCI,SAAlC,EAAlB;AACA,gBAAMC,QAAQ,GAAGJ,SAAS,CAACK,cAAV,CAAyBb,SAAS,GAAG,KAArC,CAAjB,CAZuB,CAYuC;;AAE9DI,YAAAA,MAAM,CAACU,gBAAP,CAAwBP,KAAK,CAACQ,GAAN,CAAUH,QAAV,CAAxB;AACH,WAfD,EAeG,KAfH,EAHoF,CAkBzE;AACd;;AA1C2B,O;;AAAnB1B,MAAAA,kB,CACMG,Q","sourcesContent":["import { Vec3, Node, tween, Component } from 'cc';\r\n\r\nexport class PathfindingManager {\r\n    private static instance: PathfindingManager;\r\n\r\n    static getInstance(): PathfindingManager {\r\n        if (!this.instance) {\r\n            this.instance = new PathfindingManager();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    /**\r\n     * 让节点移动到目标点\r\n     * @param node 需要移动的对象\r\n     * @param targetPosition 目标点\r\n     * @param duration 移动持续时间（秒）\r\n     */\r\n    public moveTo(node: Node, targetPosition: Vec3, duration: number) {\r\n        tween(node)\r\n            .to(duration, { position: targetPosition })\r\n            .start();\r\n    }\r\n\r\n    /** 让 AI 持续追踪目标 */\r\n    followTarget(aiComponent: Component, targetNode: Node, moveSpeed: number, cb: Function) {\r\n        if (!targetNode) return;\r\n\r\n        aiComponent.schedule(() => {\r\n            if (!targetNode.isValid) {\r\n                if (cb) cb();\r\n                return;\r\n            }\r\n\r\n            // console.log('追击中...');\r\n            const aiNode = aiComponent.node;\r\n            const targetPos = targetNode.worldPosition;\r\n            const myPos = aiNode.worldPosition;\r\n\r\n            const direction = targetPos.clone().subtract(myPos).normalize();\r\n            const moveStep = direction.multiplyScalar(moveSpeed * 0.016); // 16ms 约等于 60FPS\r\n\r\n            aiNode.setWorldPosition(myPos.add(moveStep));\r\n        }, 0.016); // 60FPS 更新追击\r\n    }\r\n\r\n}\r\n\r\n"]}