{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/easy_ui_framework/UIMgr.ts"],"names":["UIMgr","_decorator","Node","instantiate","Widget","UITransform","assetManager","director","error","Component","UIController","ModuleContext","ResolutionAutoFit","ccclass","property","UIUpdater","update","updateAll","_uiCanvas","_uiRoot","inst","_inst","createFullScreenNode","canvas","getComponent","node","layer","uiTransform","addComponent","width","height","widget","isAlignBottom","isAlignTop","isAlignLeft","isAlignRight","left","right","top","bottom","setup","uiCanvas","maxLayers","layerNames","getScene","addChild","name","addPersistRootNode","i","layerNode","getLayerNode","layerIndex","children","hideAll","getUI","uiCls","allControllers","_controllers","length","c","isShowing","showUI","cb","thisArg","bundleName","getClassModule","bundle","getBundle","loadBundle","err","loadedBundle","console","log","ui","createFromModule","resArr","getRes","prefab","push","fnLoadAndCreateFromBundle","load","data","get","parent","apply"],"mappings":"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","sourcesContent":["import { _decorator, Node, Prefab, instantiate, Widget, UITransform, view, ResolutionPolicy, assetManager, AssetManager, director, error, Component } from 'cc';\nimport { UIController } from './UIController';\nimport { ModuleContext } from '../base/ModuleContext';\nimport { ResolutionAutoFit } from '../base/ResolutionAutoFit';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('tgxUIMgr.UIUpdater')\nclass UIUpdater extends Component {\n    update() {\n        UIController.updateAll();\n    }\n}\n\n/**\n * @en the `User Interface Manager`, handles some stuffs like the ui loads,ui layers,resizing etc.\n * @zh UI管理器，处理UI加载，层级，窗口变化等\n * \n * */\nexport class UIMgr {\n\n    private static _inst: UIMgr;\n    public static get inst(): UIMgr {\n        if (this._inst == null) {\n            this._inst = new UIMgr();\n        }\n        return this._inst;\n    }\n\n    private _uiCanvas: Node;\n    private _uiRoot: Node;\n\n    private createFullScreenNode() {\n        let canvas = this._uiCanvas.getComponent(UITransform);\n        let node = new Node();\n        node.layer = this._uiCanvas.layer;\n        let uiTransform = node.addComponent(UITransform);\n        uiTransform.width = canvas.width;\n        uiTransform.height = canvas.height;\n\n        let widget = node.addComponent(Widget);\n        widget.isAlignBottom = true;\n        widget.isAlignTop = true;\n        widget.isAlignLeft = true;\n        widget.isAlignRight = true;\n\n        widget.left = 0;\n        widget.right = 0;\n        widget.top = 0;\n        widget.bottom = 0;\n        return node;\n    }\n\n    /**\n     * @en setup this UIMgr,`don't call more than once`.\n     * @zh 初始化UIMgr,`不要多次调用`\n     *  */\n    public setup(uiCanvas: Node | Prefab, maxLayers: number, layerNames?: Array<string>) {\n        if (this._uiCanvas) {\n            return;\n        }\n\n        if (!uiCanvas) {\n            throw error('uiCanvas must be a Node or Prefab');\n        }\n        if (uiCanvas instanceof Node) {\n            this._uiCanvas = uiCanvas;\n        }\n        else {\n            this._uiCanvas = instantiate(uiCanvas);\n            director.getScene().addChild(this._uiCanvas);\n        }\n\n        this._uiCanvas.name = '$tgxUICanvas$';\n        director.addPersistRootNode(this._uiCanvas);\n\n        if (!this._uiCanvas.getComponent(UIUpdater)) {\n            this._uiCanvas.addComponent(UIUpdater);\n        }\n\n        //this.resize();\n        let canvas = this._uiCanvas.getComponent(UITransform);\n        this._uiCanvas.addComponent(ResolutionAutoFit);\n\n        layerNames ||= [];\n\n        this._uiRoot = this.createFullScreenNode();\n        this._uiRoot.name = 'ui_root'\n        canvas.node.addChild(this._uiRoot);\n\n        //create layers\n        for (let i = 0; i < maxLayers; ++i) {\n            let layerNode = this.createFullScreenNode();\n            layerNode.name = 'ui_layer_' + (layerNames[i] ? layerNames[i] : i);\n            this._uiRoot.addChild(layerNode);\n        }\n    }\n\n    public getLayerNode(layerIndex: number): Node {\n        return this._uiRoot.children[layerIndex] || this._uiRoot;\n    }\n\n    public hideAll() {\n        UIController.hideAll();\n    }\n\n    public getUI<T extends UIController>(uiCls): T {\n        let allControllers = (UIController as any)._controllers;\n        for (let i = 0; i < allControllers.length; ++i) {\n            let c = allControllers[i];\n            if (c instanceof uiCls) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    public isShowing(uiCls: any): boolean {\n        let allControllers = (UIController as any)._controllers;\n        for (let i = 0; i < allControllers.length; ++i) {\n            if (allControllers[i] instanceof uiCls) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /***\n     * @en show ui by the given parameters.\n     * @zh 显示UI\n     * @param uiCls the class, must inherits from the class `UIController`.\n     * @param cb will be called after ui created.\n     * @param thisArg the this argument for param `cb`.\n     * @returns the instance of `uiCls`\n     *  */\n    public showUI(uiCls: any, cb?: Function, thisArg?: any): any {\n        let bundleName = ModuleContext.getClassModule(uiCls);\n        if (bundleName) {\n            let bundle = assetManager.getBundle(bundleName);\n            if (!bundle) {\n                assetManager.loadBundle(bundleName, null, (err, loadedBundle) => {\n                    if (err) {\n                        console.log(err);\n                    }\n                    else {\n                        this.showUI(uiCls, cb, thisArg);\n                    }\n                });\n                return;\n            }\n        }\n\n        let ui = ModuleContext.createFromModule(uiCls) as UIController;\n        let resArr = ui.getRes() || [];\n        if (typeof (ui.prefab) == 'string') {\n            resArr.push(ui.prefab as never);\n        }\n\n        let fnLoadAndCreateFromBundle = (bundle: AssetManager.Bundle) => {\n            bundle.load(resArr, (err, data) => {\n                if (err) {\n                    console.log(err);\n                }\n                let node: Node = null;\n                let prefab: Prefab = ui.prefab as Prefab;\n                if (typeof (ui.prefab) == 'string') {\n                    prefab = bundle.get(ui.prefab) as Prefab;\n                }\n                if (prefab) {\n                    node = instantiate(prefab);\n                }\n                else {\n                    //special for empty ui\n                    node = this.createFullScreenNode();\n                }\n\n                let parent = UIMgr.inst.getLayerNode(ui.layer);\n                parent.addChild(node);\n                ui.setup(node);\n                if (cb) {\n                    cb.apply(thisArg, [ui]);\n                }\n            });\n            return ui;\n        }\n\n        bundleName = bundleName || 'resources';\n        let bundle = assetManager.getBundle(bundleName);\n        return fnLoadAndCreateFromBundle(bundle);\n    }\n}\n"]}