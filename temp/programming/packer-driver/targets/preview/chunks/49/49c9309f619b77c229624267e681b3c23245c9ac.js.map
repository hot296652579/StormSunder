{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Component/TornadoComponent.ts"],"names":["Collider","Component","RigidBody","Vec3","_decorator","game","EventDispatcher","GameEvent","UIJoyStick","GameMgr","GameStatus","PropComponent","PropStatus","Effect2DUIMgr","AttributeBonusMgr","ccclass","property","rotateSpeed","PlayerStatus","TornadoComponent","points","tornado","rigidBody","tigger","radiusTigger","ai","attack","speed","currentExp","height","currentLv","giveExp","nextExp","nickName","playerStatus","LIFE","playerInfo","isColliding","curHitObj","_attackInterval","_lastAttackTime","Map","attributeBonusMgr","start","initPlayer","initilizeUI","registerEvent","changeStatus","node","getChildByName","getComponent","children","map","child","on","onTriggerEnter","onTriggerStay","onTriggerExit","inst","userModel","getExpNeed","getStormSunderAttack","getStormSunderSpeed","game_tornado_base_height","Math","round","console","log","level","instance","EVENT_STORM_LEVEL_UP","stormLevelUp","event","gameStatus","Playing","otherCollider","getGroup","setPositionByObstacle","targetTornado","parent","addExpByKill","killed","cb","_originalPosition","position","clone","reverseDirection","calculateReverseDirection","newPosition","add","setPosition","setTimeout","obstaclePos","worldPosition","selfPos","direction","x","z","normalize","multiplyScalar","propComponent","currentTime","totalTime","nodeId","uuid","lastTime","get","set","status","DIE","hurt","currentHp","randomPoint","floor","random","length","ZERO","swallow","targetNode","active","removeFromParent","destroy","removePlayerInfo","update","deltaTime","onMoveHandler","onRotateHandler","onPlayerInfoHandler","addPlayerInfo","eulerAngles","y","playerDir","ins","dir","playerX","playerZ","isAI","propComp","objExp","lv","getStormSunderExp","finialExp","getExpBonus","game_exp_height","addExpProp","updatePlayerInfo","emit","EVENT_REFRESH_RANK","EVENT_UPDATE_USER_EXP","onDestroy","unregisterEvent","off"],"mappings":"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","sourcesContent":["import { BoxCollider, Button, Collider, Component, ConeCollider, CylinderCollider, ITriggerEvent, Label, Node, NodeEventType, RigidBody, SphereCollider, Vec3, _decorator, find, game } from 'cc';\r\nimport { StormSunderAudioMgr } from '../Manager/StormSunderAudioMgr';\r\nimport { EventDispatcher } from 'db://assets/core_tgx/easy_ui_framework/EventDispatcher';\r\nimport { GameEvent } from '../Enum/GameEvent';\r\nimport { UIJoyStick } from '../UIJoyStick';\r\nimport { GameMgr, GameStatus } from '../Manager/GameMgr';\r\nimport { PropComponent, PropStatus } from './PropComponent';\r\nimport { PlayerInfo } from './PlayerInfoComponent';\r\nimport { Effect2DUIMgr } from '../Manager/Effect2DUIMgr';\r\nimport { AttributeBonusMgr } from '../Manager/AttributeBonusMgr';\r\nimport { TornadoAIComponent } from './TornadoAIComponent';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst rotateSpeed = 500;\r\nexport enum PlayerStatus {\r\n    LIFE,\r\n    DIE\r\n}\r\n\r\n/** 龙卷风组件*/\r\n@ccclass('TornadoComponent')\r\nexport class TornadoComponent extends Component {\r\n\r\n    points: Node[] = [];\r\n    tornado: Node = null!;\r\n    rigidBody: RigidBody = null!;\r\n    tigger: Collider = null!; //龙卷风触发器\r\n    radiusTigger: Collider = null!;     //龙卷风半径检测触发器\r\n\r\n    ai: boolean = false;\r\n    attack: number = 20;\r\n    speed: number = 50;\r\n    currentExp: number = 0;\r\n    height: number = 0; //龙卷风高度\r\n    currentLv: number = 1;\r\n    giveExp: number = 10; //被吃掉给予经验\r\n    nextExp: number = 100;\r\n    nickName: string = null;\r\n    playerStatus: PlayerStatus = PlayerStatus.LIFE;\r\n    playerInfo: PlayerInfo = null;\r\n    isColliding: boolean = false;\r\n    //当前攻击的道具或玩家\r\n    curHitObj: Node = null;\r\n\r\n    _attackInterval: number = 0.5; // 攻击间隔\r\n    _lastAttackTime: Map<string, number> = new Map(); // 记录上次攻击时间\r\n\r\n    attributeBonusMgr: AttributeBonusMgr = null;\r\n\r\n\r\n    protected start(): void {\r\n        this.initPlayer();\r\n        this.initilizeUI();\r\n        this.registerEvent();\r\n        this.changeStatus(PlayerStatus.LIFE);\r\n    }\r\n\r\n    protected initilizeUI(): void {\r\n        if (!this.node) return;\r\n\r\n        this.tornado = this.node.getChildByName('RigibodyStorm')!;\r\n        this.rigidBody = this.tornado.getComponent(RigidBody)!;\r\n        this.tigger = this.tornado.getComponent(Collider)!;\r\n        this.radiusTigger = this.node.getChildByName('radiusTigger').getComponent(Collider)!;\r\n\r\n        const points = this.node.getChildByName('points')!;\r\n        this.points = points.children.map((child) => child);\r\n\r\n        this.tigger.on('onTriggerEnter', this.onTriggerEnter, this);\r\n        this.tigger.on('onTriggerStay', this.onTriggerStay, this);\r\n        this.tigger.on('onTriggerExit', this.onTriggerExit, this);\r\n    }\r\n\r\n    protected initPlayer() {\r\n        this.attributeBonusMgr = AttributeBonusMgr.inst;\r\n        const userModel = this.attributeBonusMgr.userModel;\r\n\r\n        this.currentLv = 1;\r\n        this.currentExp = 0;\r\n        this.nextExp = this.attributeBonusMgr.getExpNeed(this.currentLv + 1);\r\n        this.attack = this.attributeBonusMgr.getStormSunderAttack(this.currentLv);\r\n        this.speed = this.attributeBonusMgr.getStormSunderSpeed(this.currentLv);\r\n        this.nickName = userModel.nickName;\r\n        this.height = userModel.game_tornado_base_height;\r\n        this.speed = Math.round((this.speed / 2) * 100) / 100;\r\n\r\n        console.log(`玩家的攻击力 :${this.attack}} 速度:${this.speed}`);\r\n\r\n        this.playerInfo = {\r\n            nickName: this.nickName,\r\n            level: this.currentLv,\r\n        }\r\n    }\r\n\r\n    protected registerEvent() {\r\n        EventDispatcher.instance.on(GameEvent.EVENT_STORM_LEVEL_UP, this.stormLevelUp, this);\r\n    }\r\n\r\n    protected onTriggerEnter(event: ITriggerEvent): void {\r\n        if (GameMgr.inst.gameStatus !== GameStatus.Playing) return;\r\n        const otherCollider = event.otherCollider;\r\n\r\n        if (event.otherCollider.getGroup() === 1 << 2) {\r\n            this.setPositionByObstacle(event);\r\n        } else if (otherCollider.getGroup() == 1 << 3) {\r\n            const targetTornado = otherCollider.node.parent.getComponent(TornadoComponent);\r\n            if (!targetTornado) return;\r\n\r\n            console.log(`当前等级:${this.currentLv} 目标等级:${targetTornado.currentLv} isAI:${targetTornado.ai}`);\r\n            if (this.currentLv > targetTornado.currentLv) {\r\n                this.curHitObj = targetTornado.node;\r\n                this.addExpByKill();\r\n                this.killed(targetTornado.node);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setPositionByObstacle(event: ITriggerEvent, cb?: Function) {\r\n        // console.log('离开碰撞物 isColliding:', this.isColliding);\r\n        if (this.isColliding) return; // 防止重复触发\r\n\r\n        let _originalPosition = this.node.position.clone();\r\n        this.isColliding = true;\r\n        _originalPosition = this.node.position.clone(); // 记录碰撞前坐标\r\n\r\n        // 计算反方向移动（保持Y轴不变）\r\n        const reverseDirection = this.calculateReverseDirection(event);\r\n        const newPosition = _originalPosition.add(reverseDirection);\r\n\r\n        // 直接修改坐标\r\n        this.node.setPosition(newPosition);\r\n\r\n        setTimeout(() => {\r\n            this.isColliding = false;\r\n            if (cb) cb();\r\n        }, 500);\r\n    }\r\n\r\n    // 计算反方向（基于障碍物位置）\r\n    protected calculateReverseDirection(event: ITriggerEvent): Vec3 {\r\n        // 获取障碍物节点位置\r\n        const obstaclePos = event.otherCollider.node.worldPosition;\r\n        const selfPos = this.node.worldPosition;\r\n\r\n        // 计算方向向量（从障碍物指向自己）\r\n        const direction = new Vec3(\r\n            selfPos.x - obstaclePos.x,\r\n            0, // Y轴保持0\r\n            selfPos.z - obstaclePos.z\r\n        );\r\n\r\n        // 归一化并乘以反冲距离\r\n        return direction.normalize().multiplyScalar(7);\r\n    }\r\n\r\n    protected onTriggerStay(event: ITriggerEvent): void {\r\n        if (GameMgr.inst.gameStatus !== GameStatus.Playing) return;\r\n\r\n        const otherCollider = event.otherCollider;\r\n\r\n        if (otherCollider.getGroup() == 1 << 4) {\r\n            this.curHitObj = otherCollider.node;\r\n\r\n            if (!this.curHitObj.getComponent(PropComponent)) return;\r\n            const propComponent = this.curHitObj.getComponent(PropComponent);\r\n\r\n            const currentTime = game.totalTime;\r\n            const nodeId = otherCollider.node.uuid;\r\n            const lastTime = this._lastAttackTime.get(nodeId) || 0;\r\n\r\n            // 检查是否达到攻击间隔\r\n            if (currentTime - lastTime >= this._attackInterval * 1000) {\r\n                this._lastAttackTime.set(nodeId, currentTime);\r\n\r\n                if (propComponent.status == PropStatus.DIE) return\r\n                // 造成伤害\r\n                propComponent.hurt(this.attack);\r\n\r\n                // 检查道具是否被摧毁\r\n                if (propComponent.currentHp <= 0) {\r\n                    // 随机选择一个吸收点\r\n                    const randomPoint = this.points[Math.floor(Math.random() * this.points.length)];\r\n                    if (randomPoint) {\r\n                        otherCollider.node.parent = randomPoint;\r\n                        otherCollider.node.setPosition(Vec3.ZERO);\r\n                        propComponent.swallow();\r\n                        this.addExpByKill();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // else if (otherCollider.getGroup() == 1 << 3) {\r\n        //     const targetTornado = otherCollider.node.parent.getComponent(TornadoComponent);\r\n        //     if (!targetTornado) return;\r\n\r\n        //     if (this.currentLv > targetTornado.currentLv) {\r\n        //         this.curHitObj = targetTornado.node;\r\n        //         this.addExpByKill();\r\n        //         this.killed(targetTornado.node);\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    //被击杀\r\n    async killed(targetNode: Node) {\r\n        const targetTornado = targetNode.getComponent(TornadoComponent);\r\n        if (targetTornado && !targetTornado.ai) {\r\n            // 如果是玩家被击杀，只隐藏节点\r\n            targetNode.active = false;\r\n        } else {\r\n            // 如果是AI被击杀，移除并销毁节点\r\n            targetNode.removeFromParent();\r\n            targetNode.destroy();\r\n        }\r\n        Effect2DUIMgr.inst.removePlayerInfo(targetNode);\r\n    }\r\n\r\n    onTriggerExit(event: ITriggerEvent) {\r\n        if (event.otherCollider.getGroup() == 1 << 4) {\r\n            this.curHitObj = null;\r\n        }\r\n    }\r\n\r\n    protected update(deltaTime: number) {\r\n        if (GameMgr.inst.gameStatus != GameStatus.Playing) return;\r\n\r\n        this.onMoveHandler();\r\n        this.onRotateHandler();\r\n        this.onPlayerInfoHandler();\r\n    }\r\n\r\n    protected onPlayerInfoHandler() {\r\n        if (!this.node || !this.playerInfo) return;\r\n        Effect2DUIMgr.inst.addPlayerInfo(this.node, this.playerInfo);\r\n    }\r\n\r\n    onRotateHandler(): void {\r\n        this.node.eulerAngles = new Vec3(this.node.eulerAngles.x, this.node.eulerAngles.y + rotateSpeed * game.deltaTime, this.node.eulerAngles.z);\r\n    }\r\n\r\n    onMoveHandler(): void {\r\n        if (this.isColliding || this.ai) return;\r\n\r\n        const playerDir = UIJoyStick.ins.dir;\r\n        const playerX = playerDir.x * this.speed * game.deltaTime;\r\n        const playerZ = playerDir.y * this.speed * game.deltaTime;\r\n\r\n        this.node.setPosition(this.node.position.x + playerX, 0, this.node.position.z - playerZ);\r\n    }\r\n\r\n    protected addExpByKill(isAI?: boolean) {\r\n        if (!this.curHitObj) return;\r\n\r\n        const propComp = this.curHitObj.getComponent(PropComponent);\r\n\r\n        let objExp = 0;\r\n        if (this.curHitObj.getComponent(PropComponent)) {\r\n            objExp = propComp.currentExp;\r\n        } else {\r\n            const lv = this.curHitObj.getComponent(TornadoComponent).currentLv;\r\n            objExp = AttributeBonusMgr.inst.getStormSunderExp(lv);\r\n        }\r\n\r\n        objExp = AttributeBonusMgr.inst.getStormSunderExp(objExp);\r\n        const finialExp = AttributeBonusMgr.inst.getExpBonus(objExp, isAI);\r\n        this.currentExp += finialExp;\r\n        this.height += finialExp * AttributeBonusMgr.inst.userModel.game_exp_height;\r\n        Effect2DUIMgr.inst.addExpProp(this.node, finialExp);\r\n\r\n        if (this.currentExp >= this.nextExp) {\r\n            this.currentLv++;\r\n            this.playerInfo.level = this.currentLv;\r\n            this.stormLevelUp();\r\n            Effect2DUIMgr.inst.updatePlayerInfo(this.node, this.playerInfo);\r\n        }\r\n\r\n        EventDispatcher.instance.emit(GameEvent.EVENT_REFRESH_RANK);\r\n\r\n        if (!isAI) {\r\n            EventDispatcher.instance.emit(GameEvent.EVENT_UPDATE_USER_EXP, [this.currentExp, this.nextExp]);\r\n        }\r\n    }\r\n\r\n    private stormLevelUp() {\r\n        const attributeBonusMgr = AttributeBonusMgr.inst;\r\n        this.nextExp = attributeBonusMgr.getExpNeed(this.currentLv + 1);\r\n        this.attack = attributeBonusMgr.getStormSunderAttack(this.currentLv);\r\n        this.speed = attributeBonusMgr.getStormSunderSpeed(this.currentLv);\r\n        this.speed = Math.round((this.speed / 2) * 100) / 100;\r\n        this.currentExp = 0;\r\n    }\r\n\r\n    private changeStatus(status: PlayerStatus) {\r\n        this.playerStatus = status;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this.unregisterEvent();\r\n    }\r\n\r\n    protected unregisterEvent() {\r\n        EventDispatcher.instance.off(GameEvent.EVENT_STORM_LEVEL_UP, this.stormLevelUp, this);\r\n    }\r\n\r\n}\r\n"]}