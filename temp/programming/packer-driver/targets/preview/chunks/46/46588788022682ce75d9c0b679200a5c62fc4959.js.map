{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Component/PropMoveComponent.ts"],"names":["_decorator","CCFloat","Vec3","randomRange","PropComponent","PropStatus","PropMgr","ccclass","property","PropMoveComponent","type","displayName","currentDirection","distanceMoved","start","moveSpeed","Math","round","changeDirection","onTriggerEnter","event","otherCollider","otherNode","node","oppositeDirection","multiplyScalar","randomX","randomZ","set","normalize","update","deltaTime","status","DIE","moveStep","moveVec","x","z","position","add","moveDistance","onDestroy","inst","removeMovingProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAsDC,MAAAA,O,OAAAA,O;AAASC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;;AACrEC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,U,iBAAAA,U;;AAEfC,MAAAA,O,iBAAAA,O;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;mCAGjBS,iB,WADZF,OAAO,CAAC,mBAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAET,OAAR;AAAiBU,QAAAA,WAAW,EAAE;AAA9B,OAAD,C,UAGRH,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAET,OAAR;AAAiBU,QAAAA,WAAW,EAAE;AAA9B,OAAD,C,2BANb,MACaF,iBADb;AAAA;AAAA,0CACqD;AAAA;AAAA;;AAAA;;AAAA;;AAQjD;AARiD,eASzCG,gBATyC,GAShB,IAAIV,IAAJ,EATgB;AAUjD;AAViD,eAWzCW,aAXyC,GAWjB,CAXiB;AAAA;;AAajDC,QAAAA,KAAK,GAAG;AACJ,gBAAMA,KAAN;AAEA,eAAKC,SAAL,GAAiBC,IAAI,CAACC,KAAL,CAAY,KAAKF,SAAL,GAAiB,EAAlB,GAAwB,GAAnC,IAA0C,GAA3D,CAHI,CAIJ;;AACA,eAAKG,eAAL;AACH;;AAEkBC,QAAAA,cAAc,CAACC,KAAD,EAAuB;AACpD;AAEA,cAAMC,aAAa,GAAGD,KAAK,CAACC,aAA5B;AACA,cAAMC,SAAS,GAAGD,aAAa,CAACE,IAAhC;AACA,eAAKC,iBAAL;AACH,SA3BgD,CA6BjD;;;AACQA,QAAAA,iBAAiB,GAAG;AACxB,eAAKZ,gBAAL,CAAsBa,cAAtB,CAAqC,CAAC,CAAtC;AACH;AAED;AACJ;AACA;;;AACYP,QAAAA,eAAe,GAAG;AACtB;AACA,cAAMQ,OAAO,GAAGvB,WAAW,CAAC,CAAC,CAAF,EAAK,CAAL,CAA3B;AACA,cAAMwB,OAAO,GAAGxB,WAAW,CAAC,CAAC,CAAF,EAAK,CAAL,CAA3B,CAHsB,CAKtB;;AACA,eAAKS,gBAAL,CAAsBgB,GAAtB,CAA0BF,OAA1B,EAAmC,CAAnC,EAAsCC,OAAtC;AACA,eAAKf,gBAAL,CAAsBiB,SAAtB,GAPsB,CAStB;;AACA,eAAKhB,aAAL,GAAqB,CAArB,CAVsB,CAYtB;AACH;;AAEDiB,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAI,KAAKC,MAAL,KAAgB;AAAA;AAAA,wCAAWC,GAA/B,EAAoC,OADd,CAGtB;;AACA,cAAMC,QAAQ,GAAG,KAAKnB,SAAL,GAAiBgB,SAAlC,CAJsB,CAMtB;;AACA,eAAKlB,aAAL,IAAsBqB,QAAtB,CAPsB,CAStB;;AACA,cAAMC,OAAO,GAAG,IAAIjC,IAAJ,CACZ,KAAKU,gBAAL,CAAsBwB,CAAtB,GAA0BF,QADd,EAEZ,CAFY,EAGZ,KAAKtB,gBAAL,CAAsByB,CAAtB,GAA0BH,QAHd,CAAhB,CAVsB,CAgBtB;;AACA,eAAKX,IAAL,CAAUe,QAAV,GAAqB,KAAKf,IAAL,CAAUe,QAAV,CAAmBC,GAAnB,CAAuBJ,OAAvB,CAArB,CAjBsB,CAmBtB;;AACA,cAAI,KAAKtB,aAAL,IAAsB,KAAK2B,YAA/B,EAA6C;AACzC,iBAAKtB,eAAL;AACH;AACJ;;AAESuB,QAAAA,SAAS,GAAS;AACxB,gBAAMA,SAAN;AAEA;AAAA;AAAA,kCAAQC,IAAR,CAAaC,gBAAb;AACH;;AAjFgD,O;;;;;iBAG1B,E;;;;;;;iBAGH,E","sourcesContent":["import { _decorator, Component, Collider, ITriggerEvent, Node, CCFloat, Vec3, randomRange, PhysicsSystem } from 'cc';\r\nimport { PropComponent, PropStatus } from './PropComponent';\r\nimport { Effect2DUIMgr } from '../Manager/Effect2DUIMgr';\r\nimport { PropMgr } from '../Manager/PropMgr';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PropMoveComponent')\r\nexport class PropMoveComponent extends PropComponent {\r\n\r\n    @property({ type: CCFloat, displayName: \"移动距离\" })\r\n    moveDistance: number = 10;\r\n\r\n    @property({ type: CCFloat, displayName: \"移动速度\" })\r\n    moveSpeed: number = 10;\r\n\r\n    // 当前移动方向\r\n    private currentDirection: Vec3 = new Vec3();\r\n    // 已移动距离\r\n    private distanceMoved: number = 0;\r\n\r\n    start() {\r\n        super.start();\r\n\r\n        this.moveSpeed = Math.round((this.moveSpeed / 10) * 100) / 100;\r\n        // 初始化随机移动方向\r\n        this.changeDirection();\r\n    }\r\n\r\n    protected override onTriggerEnter(event: ITriggerEvent) {\r\n        // super.onTriggerEnter(event);\r\n\r\n        const otherCollider = event.otherCollider;\r\n        const otherNode = otherCollider.node;\r\n        this.oppositeDirection();\r\n    }\r\n\r\n    //反方向运动 \r\n    private oppositeDirection() {\r\n        this.currentDirection.multiplyScalar(-1);\r\n    }\r\n\r\n    /**\r\n     * 改变移动方向\r\n     */\r\n    private changeDirection() {\r\n        // 随机生成一个水平方向（x和z轴）\r\n        const randomX = randomRange(-1, 1);\r\n        const randomZ = randomRange(-1, 1);\r\n\r\n        // 设置新的移动方向并归一化\r\n        this.currentDirection.set(randomX, 0, randomZ);\r\n        this.currentDirection.normalize();\r\n\r\n        // 重置已移动距离\r\n        this.distanceMoved = 0;\r\n\r\n        // console.log(`改变移动方向: (${this.currentDirection.x}, ${this.currentDirection.z})`);\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if (this.status === PropStatus.DIE) return;\r\n\r\n        // 计算当前帧移动距离\r\n        const moveStep = this.moveSpeed * deltaTime;\r\n\r\n        // 更新已移动距离\r\n        this.distanceMoved += moveStep;\r\n\r\n        // 计算移动向量\r\n        const moveVec = new Vec3(\r\n            this.currentDirection.x * moveStep,\r\n            0,\r\n            this.currentDirection.z * moveStep\r\n        );\r\n\r\n        // 更新位置\r\n        this.node.position = this.node.position.add(moveVec);\r\n\r\n        // 如果已移动距离超过设定值，改变方向\r\n        if (this.distanceMoved >= this.moveDistance) {\r\n            this.changeDirection();\r\n        }\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        super.onDestroy();\r\n\r\n        PropMgr.inst.removeMovingProp();\r\n    }\r\n}\r\n\r\n\r\n"]}