{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/module_storm_sunder/Script/Manager/PropMgr.ts"],"names":["PropMgr","instantiate","Vec3","game","PhysicsSystem","geometry","resLoader","StormSunderGlobalInstance","TornadoComponent","PlayerMgr","GameMgr","GameStatus","propRes","propInitNum","propMaxNum","propCreateCycle","propCreateNum","tornadoNode","spawnRadius","raycastDistance","curMovePropsCount","lastCreateTime","Instance","_instance","inst","genaratorInitialData","update","deltaTime","getGameStatus","Playing","currentTime","totalTime","genatorProp","propsUI","instance","props","getTornadoNode","index","spawnPos","getValidSpawnPosition","isPositionBlocked","propPrefab","loadAsync","gameBundleName","Math","floor","random","length","newMonster","setParent","setWorldPosition","maxAttempts","i","getRandomSpawnPosition","worldPosition","playerPos","angle","PI","distance","ray","Ray","x","y","z","cos","sin","hit","raycastClosest","hitResult","raycastClosestResult","position","collider","getNearestProp","playerNode","minDistance","Infinity","nearestProp","propsNodes","children","forEach","prop","propPos","removeMovingProp","playersUI","players","filter","child","getComponent"],"mappings":"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","sourcesContent":["import { assetManager, instantiate, Prefab, Node, UITransform, Vec3, Vec2, view, game, PhysicsSystem, geometry, isValid } from \"cc\";\r\nimport { resLoader } from \"db://assets/core_tgx/base/ResLoader\";\r\nimport { StormSunderGlobalInstance } from \"../StormSunderGlobalInstance\";\r\nimport { TornadoComponent } from \"../Component/TornadoComponent\";\r\nimport { PlayerMgr } from \"./PlayerMgr\";\r\nimport { GameMgr, GameStatus } from \"./GameMgr\";\r\n\r\nconst propRes = [\r\n    \"Prefabs/Props/altman\",\r\n    \"Prefabs/Props/aula\",\r\n    \"Prefabs/Props/clown\",\r\n]\r\n\r\n/** 道具管理器*/\r\nexport class PropMgr {\r\n    private static _instance: PropMgr;\r\n    public static get Instance(): PropMgr {\r\n        if (this._instance == null) {\r\n            this._instance = new PropMgr();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public static get inst(): PropMgr {\r\n        return this.Instance;\r\n    }\r\n\r\n    //初始数量\r\n    public propInitNum: number = 10;\r\n    //数量上限\r\n    public propMaxNum: number = 100;\r\n    //生成周期\r\n    public propCreateCycle: number = 3;\r\n    //生成数量\r\n    public propCreateNum: number = 10;\r\n\r\n    public tornadoNode: Node = null;//玩家节点\r\n\r\n    public spawnRadius: number = 20; // 生成范围半径\r\n    public raycastDistance: number = 1;//射线检测距离\r\n    curMovePropsCount: number = 0; //当前移动道具数量\r\n    lastCreateTime: number = 0;//上次生成时间\r\n\r\n    public genaratorInitialData() {\r\n        //DOTO 取配置 先定义假数据\r\n\r\n        this.propInitNum = 10;\r\n        this.propMaxNum = 100;\r\n        this.propCreateCycle = 2;\r\n        this.propCreateNum = 1;\r\n    }\r\n\r\n    public update(deltaTime: number) {\r\n        if (this.curMovePropsCount >= this.propMaxNum || GameMgr.inst.getGameStatus() != GameStatus.Playing) return;\r\n\r\n        const currentTime = game.totalTime / 1000; // 转换为秒\r\n\r\n        // 检查是否达到生成周期\r\n        if (currentTime - this.lastCreateTime >= this.propCreateCycle) {\r\n            this.lastCreateTime = currentTime; // 更新上次生成时间\r\n            this.genatorProp(); // 执行生成道具逻辑\r\n            // console.log(`道具生成周期到达，当前道具数量：${this.curMovePropsCount}`);\r\n        }\r\n    }\r\n\r\n    public async genatorProp() {\r\n        if (this.curMovePropsCount >= this.propMaxNum) return;\r\n\r\n        const propsUI = StormSunderGlobalInstance.instance.props!;\r\n        this.tornadoNode = await PlayerMgr.inst.getTornadoNode();\r\n\r\n        for (let index = 0; index < this.propInitNum; index++) {\r\n            let spawnPos = this.getValidSpawnPosition();\r\n            // 进行四向物理检测\r\n            if (spawnPos && !this.isPositionBlocked(spawnPos)) {\r\n                const propPrefab = await resLoader.loadAsync(resLoader.gameBundleName, propRes[Math.floor(Math.random() * propRes.length)]);\r\n                let newMonster = instantiate(propPrefab) as any;\r\n                newMonster.setParent(propsUI);\r\n                newMonster.setWorldPosition(spawnPos);\r\n                this.curMovePropsCount++;\r\n                // console.log(\"怪物生成成功\", spawnPos);\r\n            }\r\n\r\n            // console.warn(\"未找到合适的怪物生成点\");\r\n        }\r\n    }\r\n\r\n    /** 获取一个合法的生成位置 */\r\n    getValidSpawnPosition(): Vec3 | null {\r\n        const maxAttempts = 10;\r\n        for (let i = 0; i < maxAttempts; i++) {\r\n            let spawnPos = this.getRandomSpawnPosition();\r\n            if (!this.isPositionBlocked(spawnPos)) {\r\n                return spawnPos; // 当前位置没有障碍物，返回该位置\r\n            }\r\n        }\r\n        return null; // 失败，返回 null\r\n    }\r\n\r\n    /** 随机获取玩家附近的生成点 */\r\n    getRandomSpawnPosition(): Vec3 {\r\n        if (!this.tornadoNode || !this.tornadoNode.worldPosition) return;\r\n\r\n        let playerPos = this.tornadoNode.worldPosition;\r\n        let angle = Math.random() * Math.PI * 2; // 随机角度\r\n        let distance = Math.random() * this.spawnRadius + this.spawnRadius;\r\n\r\n        // 创建射线检测前方障碍物\r\n        let ray = new geometry.Ray(\r\n            playerPos.x,\r\n            playerPos.y,\r\n            playerPos.z,\r\n            Math.cos(angle),\r\n            0,\r\n            Math.sin(angle)\r\n        );\r\n\r\n        let hit = PhysicsSystem.instance.raycastClosest(ray, distance, 1 << 2);\r\n\r\n        if (hit) {\r\n            // 如果检测到障碍物，将生成距离调整为龙卷风到障碍物之间\r\n            let hitResult = PhysicsSystem.instance.raycastClosestResult;\r\n            if (hitResult && hitResult.distance < distance) {\r\n                // 在龙卷风和障碍物之间随机选择一个位置，留出一定安全距离\r\n                distance = Math.random() * (hitResult.distance - 1) + 1;\r\n            }\r\n        }\r\n\r\n        let x = playerPos.x + Math.cos(angle) * distance;\r\n        let z = playerPos.z + Math.sin(angle) * distance;\r\n        let y = 0;\r\n        return new Vec3(x, y, z);\r\n    }\r\n\r\n    /** 检测当前位置是否有障碍物 */\r\n    isPositionBlocked(position: Vec3): boolean {\r\n        if (!position) return false;\r\n\r\n        let ray = new geometry.Ray(position.x, position.y, position.z, 0, 0, 0);\r\n\r\n        if (PhysicsSystem.instance.raycastClosest(ray, this.raycastDistance)) {\r\n            let hit = PhysicsSystem.instance.raycastClosestResult;\r\n            if (hit && hit.collider) {\r\n                // console.log(\"检测到障碍物\", hit.collider.node.name, \"位置\", position);\r\n                return true; // 当前位置有障碍物\r\n            }\r\n        }\r\n\r\n        return false; // 没有检测到障碍物\r\n    }\r\n\r\n    /**\r\n     * 获取距离玩家节点最近的道具节点\r\n     * @param playerNode 玩家节点\r\n     * @returns 距离最近的道具节点（如果存在），否则返回 null\r\n     */\r\n    getNearestProp(playerNode: Node): Node | null {\r\n        if (!playerNode) return null;\r\n\r\n        let minDistance = Infinity;\r\n        let nearestProp: Node | null = null;\r\n\r\n        const playerPos = playerNode.worldPosition;\r\n        const propsNodes = StormSunderGlobalInstance.instance.props;\r\n\r\n        propsNodes.children.forEach(prop => {\r\n            const propPos = prop.worldPosition;\r\n            const distance = Vec3.distance(playerPos, propPos);\r\n\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                nearestProp = prop;\r\n            }\r\n        });\r\n\r\n        return nearestProp;\r\n    }\r\n\r\n    /** 删除移动道具*/\r\n    removeMovingProp() {\r\n        this.curMovePropsCount--;\r\n    }\r\n\r\n    //获取玩家龙卷风节点\r\n    getTornadoNode(): Node {\r\n        const playersUI = StormSunderGlobalInstance.instance.players!;\r\n        if (!this.tornadoNode) {\r\n            if (playersUI && playersUI.children.length > 0) {\r\n                this.tornadoNode = playersUI.children.filter(child => child.getComponent(TornadoComponent))[0]\r\n            }\r\n        }\r\n        return this.tornadoNode;\r\n    }\r\n}\r\n\r\n"]}