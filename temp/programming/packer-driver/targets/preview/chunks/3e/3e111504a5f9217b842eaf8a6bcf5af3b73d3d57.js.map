{"version":3,"sources":["file:///E:/CocosCreator/StormSunder_Github/StormSunder/assets/core_tgx/base/AudioMgr.ts"],"names":["AudioMgr","AudioClip","AudioSource","Node","assetManager","director","inst","_inst","constructor","_audioSource","_bgMusicEnabled","_soundEffectsEnabled","audioMgr","name","getScene","addChild","addPersistRootNode","addComponent","audioSource","bgMusicEnabled","soundEffectsEnabled","playOneShot","sound","volume","bundleName","bundle","getBundle","load","err","clip","console","log","play","loop","stop","pause","resume","toggleBgMusic","enabled","toggleSoundEffects"],"mappings":"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","sourcesContent":["import { AudioClip, AudioSource, Node, assetManager, director } from 'cc';\n\n/**\n * @en\n * This is a singleton class for audio play, can be easily called from anywhere in your project.\n * @zh\n * 这是一个用于播放音频的单件类，可以很方便地在项目的任何地方调用。\n */\nexport class AudioMgr {\n    private static _inst: AudioMgr;\n    public static get inst(): AudioMgr {\n        if (this._inst == null) {\n            this._inst = new AudioMgr();\n        }\n        return this._inst;\n    }\n\n    private _audioSource: AudioSource;\n    private _bgMusicEnabled: boolean = true; // 是否开启背景音乐\n    private _soundEffectsEnabled: boolean = true; // 是否开启音效\n\n    constructor() {\n        // 创建一个节点作为 audioMgr\n        let audioMgr = new Node();\n        audioMgr.name = '__audioMgr__';\n\n        // 添加节点到场景\n        director.getScene().addChild(audioMgr);\n\n        // 标记为常驻节点，这样场景切换的时候就不会被销毁了\n        director.addPersistRootNode(audioMgr);\n\n        // 添加 AudioSource 组件，用于播放音频\n        this._audioSource = audioMgr.addComponent(AudioSource);\n    }\n\n    public get audioSource() {\n        return this._audioSource;\n    }\n    public get bgMusicEnabled() {\n        return this._bgMusicEnabled;\n    }\n    public get soundEffectsEnabled() {\n        return this._soundEffectsEnabled;\n    }\n\n    /**\n     * @en\n     * Play short audio, such as strikes, explosions\n     * @zh\n     * 播放短音频，比如 打击音效，爆炸音效等\n     * @param sound Clip or URL for the audio\n     * @param volume \n     */\n    playOneShot(sound: AudioClip | string, volume: number = 1.0, bundleName: string = 'resources') {\n        if (!this._soundEffectsEnabled) {\n            return; // 如果音效开关关闭，则不播放音效\n        }\n\n        if (sound instanceof AudioClip) {\n            this._audioSource.playOneShot(sound, volume);\n        } else {\n            let bundle = assetManager.getBundle(bundleName);\n            bundle.load(sound, (err, clip: AudioClip) => {\n                if (err) {\n                    console.log(err);\n                } else {\n                    this._audioSource.playOneShot(clip, volume);\n                }\n            });\n        }\n    }\n\n    /**\n     * @en\n     * Play long audio, such as the bg music\n     * @zh\n     * 播放长音频，比如 背景音乐\n     * @param sound Clip or URL for the sound\n     * @param volume \n     */\n    play(sound: AudioClip | string, volume: number = 1.0, bundleName: string = 'resources') {\n        if (!this._bgMusicEnabled) {\n            return; // 如果背景音乐开关关闭，则不播放音乐\n        }\n\n        if (sound instanceof AudioClip) {\n            this._audioSource.clip = sound;\n            this._audioSource.play();\n            this._audioSource.loop = true;\n            this.audioSource.volume = volume;\n        } else {\n            if (this._audioSource.clip) {\n                this._audioSource.stop();\n                this._audioSource.clip = null;\n            }\n\n            let bundle = assetManager.getBundle(bundleName);\n            bundle.load(sound, (err, clip: AudioClip) => {\n                if (err) {\n                    console.log(err);\n                } else {\n                    this._audioSource.clip = clip;\n                    this._audioSource.play();\n                    this._audioSource.loop = true;\n                    this.audioSource.volume = volume;\n                }\n            });\n        }\n    }\n\n    /**\n     * Stop the audio play\n     */\n    stop() {\n        this._audioSource.stop();\n    }\n\n    /**\n     * Pause the audio play\n     */\n    pause() {\n        this._audioSource.pause();\n    }\n\n    /**\n     * Resume the audio play\n     */\n    resume() {\n        if (this._bgMusicEnabled) {\n            this._audioSource.play();\n        }\n    }\n\n    /**\n     * Enable or disable background music\n     * 开启或关闭背景音乐\n     * @param enabled \n     */\n    toggleBgMusic(enabled: boolean) {\n        this._bgMusicEnabled = enabled;\n        if (enabled) {\n            this.resume(); // 开启时恢复播放背景音乐\n        } else {\n            this.stop(); // 关闭时停止背景音乐\n        }\n    }\n\n    /**\n     * Enable or disable sound effects\n     * 开启或关闭音效\n     * @param enabled \n     */\n    toggleSoundEffects(enabled: boolean) {\n        this._soundEffectsEnabled = enabled;\n    }\n}\n"]}